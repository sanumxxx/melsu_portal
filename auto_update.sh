#!/bin/bash

# üîÑ MELSU Portal - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –æ—Ç–∫–∞—Ç–æ–º
# –ê–≤—Ç–æ—Ä: Sasha Honcharov (sanumxxx@yandex.ru)

set -euo pipefail  # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_PATH="/var/www/melsu"
BACKEND_PATH="$PROJECT_PATH/backend"
FRONTEND_PATH="$PROJECT_PATH/frontend"
BACKUP_DIR="/var/backups/melsu"
LOG_FILE="/var/log/melsu/auto_update.log"
ROLLBACK_INFO="/tmp/melsu_rollback_info"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
mkdir -p $BACKUP_DIR
mkdir -p /var/log/melsu

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level=$1
    shift
    local message="$@"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a $LOG_FILE
}

log_info() {
    log "INFO" "$@"
    echo -e "${BLUE}[INFO]${NC} $@"
}

log_success() {
    log "SUCCESS" "$@"
    echo -e "${GREEN}[SUCCESS]${NC} $@"
}

log_warning() {
    log "WARNING" "$@"
    echo -e "${YELLOW}[WARNING]${NC} $@"
}

log_error() {
    log "ERROR" "$@"
    echo -e "${RED}[ERROR]${NC} $@"
}

log_step() {
    log "STEP" "$@"
    echo -e "${PURPLE}[STEP]${NC} $@"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è Slack/Telegram)
send_notification() {
    local status=$1
    local message=$2
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    log "NOTIFICATION" "[$status] $message"
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Slack, Telegram, email –∏ —Ç.–¥.
    # curl -X POST -H 'Content-type: application/json' \
    #     --data "{\"text\":\"$message\"}" \
    #     $SLACK_WEBHOOK_URL
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
check_permissions() {
    if [[ $EUID -ne 0 ]]; then
        log_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local services=("postgresql" "redis-server" "nginx")
    for service in "${services[@]}"; do
        if ! systemctl is-active --quiet $service; then
            log_error "–°–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
            return 1
        fi
    done
    
    log_success "–í—Å–µ –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
check_disk_space() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
    
    local available=$(df / | awk 'NR==2 {print $4}')
    local threshold=1048576  # 1GB –≤ KB
    
    if [ $available -lt $threshold ]; then
        log_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (–¥–æ—Å—Ç—É–ø–Ω–æ: $(($available/1024))MB)"
        return 1
    fi
    
    log_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: $(($available/1024))MB"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î
backup_database() {
    log_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    local backup_file="$BACKUP_DIR/melsu_db_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    if sudo -u postgres pg_dump melsu_db > $backup_file; then
        log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_file"
        echo "BACKUP_FILE=$backup_file" > $ROLLBACK_INFO
        
        # –°–∂–∏–º–∞–µ–º –±—ç–∫–∞–ø –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        gzip $backup_file
        log_info "–ë—ç–∫–∞–ø —Å–∂–∞—Ç: ${backup_file}.gz"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        find $BACKUP_DIR -name "melsu_db_backup_*.sql.gz" -mtime +7 -delete
        
        return 0
    else
        log_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
check_for_updates() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
    
    cd $PROJECT_PATH
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç
    local current_commit=$(git rev-parse HEAD)
    echo "CURRENT_COMMIT=$current_commit" >> $ROLLBACK_INFO
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    git fetch origin main
    
    local remote_commit=$(git rev-parse origin/main)
    
    if [ "$current_commit" = "$remote_commit" ]; then
        log_info "–ü—Ä–æ–µ–∫—Ç —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω"
        return 1
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    log_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
    git log --oneline $current_commit..origin/main | head -5
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
validate_update() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
    
    cd $PROJECT_PATH
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ
    local critical_files=(
        "backend/app/main.py"
        "backend/requirements.txt"
        "frontend/package.json"
        "backend/alembic.ini"
    )
    
    for file in "${critical_files[@]}"; do
        if [ ! -f "$file" ]; then
            log_error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $file"
            return 1
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ –≤ backend
    if ! python3 -m py_compile backend/app/main.py; then
        log_error "–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main.py"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
    if ! node -e "JSON.parse(require('fs').readFileSync('frontend/package.json'))"; then
        log_error "–û—à–∏–±–∫–∞ –≤ package.json"
        return 1
    fi
    
    log_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
apply_updates() {
    log_step "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
    
    cd $PROJECT_PATH
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    local current_commit=$(git rev-parse HEAD)
    local changed_files=$(git diff --name-only $current_commit origin/main)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
    git reset --hard origin/main
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ backend
    if echo "$changed_files" | grep -q "backend/requirements.txt"; then
        log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend..."
        cd $BACKEND_PATH
        sudo -u melsu venv/bin/pip install -r requirements.txt
        cd $PROJECT_PATH
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ frontend
    if echo "$changed_files" | grep -q "frontend/package.json"; then
        log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend..."
        cd $FRONTEND_PATH
        sudo -u melsu npm install
        cd $PROJECT_PATH
    fi
    
    log_success "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î
apply_migrations() {
    log_step "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    cd $BACKEND_PATH
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é
    local current_rev=$(sudo -u melsu venv/bin/alembic current 2>/dev/null | grep -o '[a-f0-9]\{12\}' | head -1)
    local head_rev=$(sudo -u melsu venv/bin/alembic heads 2>/dev/null | grep -o '[a-f0-9]\{12\}' | head -1)
    
    echo "MIGRATION_FROM=$current_rev" >> $ROLLBACK_INFO
    
    if [ "$current_rev" != "$head_rev" ]; then
        log_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å $current_rev –¥–æ $head_rev..."
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Å timeout
        if timeout 300 sudo -u melsu venv/bin/alembic upgrade head; then
            log_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
        else
            log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π –∏–ª–∏ timeout"
            return 1
        fi
    else
        log_info "–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    fi
}

# –°–±–æ—Ä–∫–∞ frontend
build_frontend() {
    log_step "–°–±–æ—Ä–∫–∞ frontend..."
    
    cd $FRONTEND_PATH
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å timeout
    if timeout 600 sudo -u melsu npm run build; then
        log_success "Frontend —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ frontend –∏–ª–∏ timeout"
        return 1
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    log_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # Graceful restart —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    local services=("melsu-worker" "melsu-api")
    
    for service in "${services[@]}"; do
        log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ $service..."
        systemctl restart $service
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        local retries=0
        while [ $retries -lt 30 ]; do
            if systemctl is-active --quiet $service; then
                log_success "$service –∑–∞–ø—É—â–µ–Ω"
                break
            fi
            if [ $retries -eq 29 ]; then
                log_error "$service –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
                return 1
            fi
            sleep 1
            retries=$((retries + 1))
        done
    done
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    systemctl reload nginx
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
health_check() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã..."
    
    local checks_passed=0
    local total_checks=4
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    local retries=0
    while [ $retries -lt 20 ]; do
        local api_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health 2>/dev/null)
        if [ "$api_status" = "200" ]; then
            log_success "‚úÖ API health check - OK"
            checks_passed=$((checks_passed + 1))
            break
        fi
        if [ $retries -eq 19 ]; then
            log_error "‚ùå API health check - FAILED"
        fi
        sleep 3
        retries=$((retries + 1))
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    local frontend_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ 2>/dev/null)
    if [ "$frontend_status" = "200" ]; then
        log_success "‚úÖ Frontend check - OK"
        checks_passed=$((checks_passed + 1))
    else
        log_error "‚ùå Frontend check - FAILED (–∫–æ–¥: $frontend_status)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    if sudo -u postgres psql melsu_db -c "SELECT 1;" > /dev/null 2>&1; then
        log_success "‚úÖ Database check - OK"
        checks_passed=$((checks_passed + 1))
    else
        log_error "‚ùå Database check - FAILED"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    local services_ok=true
    for service in melsu-api melsu-worker nginx; do
        if ! systemctl is-active --quiet $service; then
            services_ok=false
            log_error "‚ùå Service $service is not active"
        fi
    done
    
    if $services_ok; then
        log_success "‚úÖ All services are active"
        checks_passed=$((checks_passed + 1))
    fi
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    if [ $checks_passed -eq $total_checks ]; then
        log_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ($checks_passed/$total_checks)"
        return 0
    else
        log_error "–ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã ($checks_passed/$total_checks)"
        return 1
    fi
}

# –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
rollback() {
    log_error "üîÑ –ù–∞—á–∏–Ω–∞—é –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
    
    if [ ! -f $ROLLBACK_INFO ]; then
        log_error "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    source $ROLLBACK_INFO
    
    # –û—Ç–∫–∞—Ç –∫–æ–¥–∞
    if [ -n "${CURRENT_COMMIT:-}" ]; then
        log_step "–û—Ç–∫–∞—Ç –∫ –∫–æ–º–º–∏—Ç—É $CURRENT_COMMIT..."
        cd $PROJECT_PATH
        git reset --hard $CURRENT_COMMIT
    fi
    
    # –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π
    if [ -n "${MIGRATION_FROM:-}" ]; then
        log_step "–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –∫ $MIGRATION_FROM..."
        cd $BACKEND_PATH
        sudo -u melsu venv/bin/alembic downgrade $MIGRATION_FROM
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ –±—ç–∫–∞–ø–∞
    if [ -n "${BACKUP_FILE:-}" ] && [ -f "${BACKUP_FILE}.gz" ]; then
        log_step "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ –±—ç–∫–∞–ø–∞..."
        gunzip -c "${BACKUP_FILE}.gz" | sudo -u postgres psql melsu_db
    fi
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    restart_services
    
    log_success "–û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
    send_notification "ROLLBACK" "–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–∞—á–µ–Ω–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup() {
    rm -f $ROLLBACK_INFO
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local start_time=$(date +%s)
    
    log_info "üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MELSU Portal..."
    send_notification "START" "–ù–∞—á–∞—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_permissions
    check_services
    check_disk_space
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if ! check_for_updates; then
        log_success "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è"
        cleanup
        exit 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    if ! backup_database; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        send_notification "FAILED" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"
        exit 1
    fi
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    if apply_updates && validate_update && apply_migrations && build_frontend && restart_services && health_check; then
        local end_time=$(date +%s)
        local duration=$((end_time - start_time))
        
        log_success "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥!"
        log_info "üåê –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        send_notification "SUCCESS" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}—Å"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        echo -e "\n${GREEN}üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:${NC}"
        systemctl --no-pager status melsu-api melsu-worker nginx
        
    else
        log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –í—ã–ø–æ–ª–Ω—è—é –æ—Ç–∫–∞—Ç..."
        send_notification "FAILED" "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫–∞—Ç"
        
        if rollback; then
            log_success "–û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            send_notification "ROLLBACK_SUCCESS" "–û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        else
            log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ! –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
            send_notification "CRITICAL" "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç–∫–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
        fi
        
        exit 1
    fi
    
    cleanup
}

# –ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log_error "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"; rollback; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 