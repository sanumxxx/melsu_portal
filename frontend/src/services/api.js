// –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ—Ä—Ç–∞–ª–∞ –ú–µ–ª–ì–£

const API_BASE_URL = "http://localhost:8000";
class ApiService {
  constructor() {
    this.accessToken = null; // –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  getCurrentToken() {
    const token = localStorage.getItem('token');
    console.log('üîç getCurrentToken: Retrieved from localStorage:', token ? 'Present' : 'Not found');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    if (token && !this.isTokenValid(token)) {
      console.warn('‚ö†Ô∏è getCurrentToken: Token expired, clearing token');
      this.clearToken();
      return null;
    }
    
    this.accessToken = token; // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç–æ–∫–µ–Ω
    console.log('‚úÖ getCurrentToken: Valid token ready for use');
    return token;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  isTokenValid(token) {
    if (!token) return false;
    
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JWT —Ç–æ–∫–µ–Ω–∞
      const parts = token.split('.');
      if (parts.length !== 3) return false;
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏)
      const payload = JSON.parse(atob(parts[1]));
      const now = Math.floor(Date.now() / 1000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
      return payload.exp && payload.exp > now;
    } catch (error) {
      console.warn('Token validation error:', error);
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  
  /**
   * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
   */
  async login(email, password) {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: email,
        password: password
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Login error:', errorData);
      throw {
        response: {
          data: {
            detail: errorData.detail || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞'
          }
        }
      };
    }

    const data = await response.json();
    console.log('Login successful:', data);
    this.setToken(data.access_token);
    
    return { data: { token: data.access_token } };
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async register(userData) {
    console.log('Registering user with data:', userData);
    
    const response = await fetch(`${API_BASE_URL}/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData)
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Registration error:', errorData);
      throw {
        response: {
          data: {
            detail: errorData.detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
          }
        }
      };
    }

    const data = await response.json();
    console.log('Registration successful:', data);
    this.setToken(data.access_token);
    
    return { data: { token: data.access_token } };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email
   */
  async sendVerificationCode(email) {
    const response = await fetch(`${API_BASE_URL}/auth/send-verification-code`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw {
        response: {
          data: {
            detail: errorData.detail || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞'
          }
        }
      };
    }

    return await response.json();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async verifyCode(email, code) {
    const response = await fetch(`${API_BASE_URL}/auth/verify-code`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, code })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw {
        response: {
          data: {
            detail: errorData.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
          }
        }
      };
    }

    return await response.json();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /api/profile/basic
   */
  async getUserProfile() {
    const token = this.getCurrentToken(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    console.log('üîê getUserProfile: Token status:', token ? 'Valid' : 'Invalid/Missing');
    
    if (!token) {
      console.log('‚ùå getUserProfile: No valid token found');
      throw new Error('No valid token available');
    }
    
    console.log('üìû getUserProfile: Making request to', `${API_BASE_URL}/api/profile/basic`);
    
    const response = await fetch(`${API_BASE_URL}/api/profile/basic`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      }
    });

    console.log('üì° getUserProfile: Response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå getUserProfile: Error response:', errorText);
      
      if (response.status === 401) {
        console.log('üö™ getUserProfile: Token expired, logging out');
        this.logout();
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
      }
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ getUserProfile: Success', data);
    return { data };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∞–ª–∏–∞—Å –¥–ª—è getUserProfile)
   */
  async getUserInfo() {
    return this.getUserProfile();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /auth/me
   */
  async getCurrentUser() {
    const token = this.getCurrentToken(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    const response = await fetch(`${API_BASE_URL}/auth/me`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      if (response.status === 401) {
        this.logout();
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
      }
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const data = await response.json();
    return { data };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  setToken(accessToken) {
    this.accessToken = accessToken;
    if (accessToken) {
      localStorage.setItem('token', accessToken);
    }
  }

  clearToken() {
    this.accessToken = null;
    localStorage.removeItem('token');
  }

  isAuthenticated() {
    const token = this.getCurrentToken(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    return !!token && this.isTokenValid(token);
  }

  logout() {
    console.log('üö™ logout: Clearing token and redirecting if needed');
    this.clearToken();
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –Ω–µ–π
    if (window.location.pathname !== '/login' && window.location.pathname !== '/' && window.location.pathname !== '/register') {
      console.log('üîÑ logout: Redirecting to login from', window.location.pathname);
      window.location.href = '/login';
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
   */
  async makeAuthenticatedRequest(url, options = {}) {
    const token = this.getCurrentToken(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    if (!token) {
      throw new Error('Not authenticated');
    }

    const config = {
      ...options,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    const response = await fetch(url, config);

    if (response.status === 401) {
      // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º
      this.logout();
      throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
    }

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    }

    return await response.json();
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã

  /**
   * GET –∑–∞–ø—Ä–æ—Å
   */
  async get(endpoint, options = {}) {
    const { params, responseType, ...fetchOptions } = options;
    let url = `${API_BASE_URL}${endpoint}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (params) {
      const searchParams = new URLSearchParams();
      Object.keys(params).forEach(key => {
        if (params[key] !== null && params[key] !== undefined) {
          searchParams.append(key, params[key]);
        }
      });
      const queryString = searchParams.toString();
      if (queryString) {
        url += `?${queryString}`;
      }
    }

    const token = this.getCurrentToken(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    const headers = {
      'Authorization': `Bearer ${token}`,
      ...fetchOptions.headers
    };

    // –î–æ–±–∞–≤–ª—è–µ–º Content-Type —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ blob –∑–∞–ø—Ä–æ—Å
    if (responseType !== 'blob') {
      headers['Content-Type'] = 'application/json';
    }

    const response = await fetch(url, {
      method: 'GET',
      headers,
      ...fetchOptions
    });

    if (response.status === 401) {
      this.logout();
      throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
    }

    if (!response.ok) {
      // –î–ª—è blob –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      if (responseType === 'blob') {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
    if (responseType === 'blob') {
      const data = await response.blob();
      return { data };
    } else {
      const data = await response.json();
      return { data };
    }
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å
   */
  async post(endpoint, data = {}, options = {}) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ª–∏ FormData
    const isFormData = data instanceof FormData;
    
    const token = this.getCurrentToken(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    // –î–ª—è FormData –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON.stringify
    const headers = {
      'Authorization': `Bearer ${token}`,
      ...options.headers
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º Content-Type —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï FormData
    if (!isFormData) {
      headers['Content-Type'] = 'application/json';
    }
    
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      method: 'POST',
      headers,
      body: isFormData ? data : JSON.stringify(data),
      ...options
    });

    if (response.status === 401) {
      this.logout();
      throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
    }

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    }

    const responseData = await response.json();
    return { data: responseData };
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å
   */
  async put(endpoint, data = {}, options = {}) {
    const token = this.getCurrentToken(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        ...options.headers
      },
      body: JSON.stringify(data),
      ...options
    });

    if (response.status === 401) {
      this.logout();
      throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
    }

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    }

    const responseData = await response.json();
    return { data: responseData };
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å
   */
  async delete(endpoint, options = {}) {
    const token = this.getCurrentToken(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });

    if (response.status === 401) {
      this.logout();
      throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
    }

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    }

    const responseData = await response.json();
    return { data: responseData };
  }

  // Portal API –º–µ—Ç–æ–¥—ã

  async getDashboard() {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/dashboard`);
  }

  async getProfile() {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/profile`);
  }

  async updateProfile(profileData) {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/api/profile/extended`, {
      method: 'PUT',
      body: JSON.stringify(profileData)
    });
  }

  async changePassword(passwordData) {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/auth/change-password`, {
      method: 'POST',
      body: JSON.stringify(passwordData)
    });
  }

  async getExtendedProfile() {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/api/profile/basic`);
  }

  async updateExtendedProfile(profileData) {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/api/profile/extended`, {
      method: 'PUT',
      body: JSON.stringify(profileData)
    });
  }

  async getSchedule() {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/schedule`);
  }

  async getGrades() {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/grades`);
  }

  async getAnnouncements() {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/announcements`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
  async checkHealth() {
    try {
      const response = await fetch(`${API_BASE_URL}/health`);
      return await response.json();
    } catch (error) {
      console.error('Health check failed:', error);
      return null;
    }
  }

  // –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
  async makeUserAdmin(userId) {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/admin/make-admin/${userId}`, {
      method: 'POST'
    });
  }

  async getAllUsers() {
    const result = await this.makeAuthenticatedRequest(`${API_BASE_URL}/admin/users`);
    return { data: result.users || [] };
  }

  async getUsersByRole(role) {
    const result = await this.makeAuthenticatedRequest(`${API_BASE_URL}/admin/users/by-role/${role}`);
    return { data: result.users || [] };
  }

  async updateUserRoles(userId, roles) {
    return this.makeAuthenticatedRequest(`${API_BASE_URL}/admin/users/${userId}/roles`, {
      method: 'PUT',
      body: JSON.stringify({ roles })
    });
  }

  // –ú–µ—Ç–æ–¥—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
   */
  async getPortfolioAchievements(category = null) {
    const params = category ? { category } : {};
    return this.get('/api/portfolio/achievements', { params });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async createAchievement(achievementData) {
    return this.post('/api/portfolio/achievements', achievementData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async getAchievement(achievementId) {
    return this.get(`/api/portfolio/achievements/${achievementId}`);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async updateAchievement(achievementId, achievementData) {
    return this.put(`/api/portfolio/achievements/${achievementId}`, achievementData);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async deleteAchievement(achievementId) {
    return this.delete(`/api/portfolio/achievements/${achievementId}`);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
   */
  async uploadPortfolioFile(achievementId, file) {
    const formData = new FormData();
    formData.append('file', file);
    
    return this.post(`/api/portfolio/achievements/${achievementId}/files`, formData);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
   */
  async deletePortfolioFile(fileId) {
    return this.delete(`/api/portfolio/files/${fileId}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
   */
  async getPortfolioStats() {
    return this.get('/api/portfolio/stats');
  }
}

const api = new ApiService();
export default api;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
export const getErrorMessage = (error) => {
  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  if (typeof error === 'string') {
    return error;
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å message (–æ–±—ã—á–Ω–∞—è JavaScript –æ—à–∏–±–∫–∞)
  if (error && error.message) {
    return error.message;
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ response.data.detail (–æ—à–∏–±–∫–∏ API)
  if (error && error.response && error.response.data && error.response.data.detail) {
    const detail = error.response.data.detail;
    
    // –ï—Å–ª–∏ detail —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (typeof detail === 'string') {
      return detail;
    }
    
    // –ï—Å–ª–∏ detail —ç—Ç–æ –º–∞—Å—Å–∏–≤ (–æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ FastAPI/Pydantic)
    if (Array.isArray(detail)) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const messages = detail.map(err => {
        if (err.msg) {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å loc
          const field = err.loc && err.loc.length > 0 ? err.loc[err.loc.length - 1] : '';
          return field ? `${field}: ${err.msg}` : err.msg;
        }
        return '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏';
      });
      
      return messages.join(', ');
    }
    
    // –ï—Å–ª–∏ detail —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å msg
    if (detail.msg) {
      return detail.msg;
    }
  }
  
  // Fallback –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
  return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const isAuthenticated = () => {
  return !!localStorage.getItem('token');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export const getToken = () => {
  return localStorage.getItem('token');
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
export const getMediaUrl = (mediaUrl) => {
  if (!mediaUrl) return null;
  
  // –ï—Å–ª–∏ URL —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (mediaUrl.startsWith('http://') || mediaUrl.startsWith('https://')) {
    return mediaUrl;
  }
  
  // –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
  return `${API_BASE_URL}${mediaUrl}`;
};

// –≠–∫—Å–ø–æ—Ä—Ç API –±–∞–∑–æ–≤–æ–≥–æ URL
export { API_BASE_URL }; 