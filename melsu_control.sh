#!/bin/bash

# üöÄ MELSU Portal - –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏
# –ê–≤—Ç–æ—Ä: Sasha Honcharov (sanumxxx@yandex.ru)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü—É—Ç–∏
PROJECT_PATH="/var/www/melsu"
BACKEND_PATH="$PROJECT_PATH/backend"
FRONTEND_PATH="$PROJECT_PATH/frontend"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

log_debug() {
    echo -e "${CYAN}[DEBUG]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service_status() {
    local service=$1
    if systemctl is-active --quiet $service; then
        echo -e "${GREEN}‚úÖ $service - –∞–∫—Ç–∏–≤–µ–Ω${NC}"
    else
        echo -e "${RED}‚ùå $service - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
check_api_health() {
    local response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health 2>/dev/null)
    if [ "$response" = "200" ]; then
        echo -e "${GREEN}‚úÖ API health check - OK${NC}"
    else
        echo -e "${RED}‚ùå API health check - FAILED (–∫–æ–¥: $response)${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
check_database() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    sudo -u postgres psql melsu_db -c "SELECT 1;" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –¥–æ—Å—Ç—É–ø–Ω–∞${NC}"
    else
        echo -e "${RED}‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π
diagnose_migrations() {
    log_step "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
    cd $BACKEND_PATH
    
    echo -e "\n${CYAN}=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ô ===${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é
    log_debug "–¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è –≤ –ë–î:"
    local current_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic current 2>&1)
    echo "$current_output"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ head —Ä–µ–≤–∏–∑–∏–∏
    log_debug "Head —Ä–µ–≤–∏–∑–∏–∏:"
    local heads_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic heads 2>&1)
    echo "$heads_output"
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ head —Ä–µ–≤–∏–∑–∏–π
    local heads_count=$(echo "$heads_output" | grep -c "^[a-f0-9]\{12\}")
    log_debug "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ head —Ä–µ–≤–∏–∑–∏–π: $heads_count"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
    log_debug "–ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):"
    sudo -u melsu $BACKEND_PATH/venv/bin/alembic history -r-10: 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if [ $heads_count -gt 1 ]; then
        log_warning "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–∏–≥—Ä–∞—Ü–∏–π: –Ω–∞–π–¥–µ–Ω–æ $heads_count head —Ä–µ–≤–∏–∑–∏–π"
        echo -e "${YELLOW}Head —Ä–µ–≤–∏–∑–∏–∏:${NC}"
        echo "$heads_output" | grep "^[a-f0-9]\{12\}"
        return 1
    elif [ $heads_count -eq 1 ]; then
        log_success "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        return 0
    else
        log_error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"
        return 2
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
fix_migration_conflicts() {
    log_step "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π..."
    cd $BACKEND_PATH
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º
    local heads_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic heads 2>&1)
    local heads_count=$(echo "$heads_output" | grep -c "^[a-f0-9]\{12\}")
    
    if [ $heads_count -le 1 ]; then
        log_info "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        return 0
    fi
    
    log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $heads_count head —Ä–µ–≤–∏–∑–∏–π. –ò—Å–ø—Ä–∞–≤–ª—è—é..."
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ head —Ä–µ–≤–∏–∑–∏–π
    local heads=$(echo "$heads_output" | grep "^[a-f0-9]\{12\}" | cut -d' ' -f1)
    log_debug "Head —Ä–µ–≤–∏–∑–∏–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: $(echo $heads | tr '\n' ' ')"
    
    # –°–æ–∑–¥–∞–µ–º merge —Ä–µ–≤–∏–∑–∏—é
    log_info "–°–æ–∑–¥–∞—é merge —Ä–µ–≤–∏–∑–∏—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è head —Ä–µ–≤–∏–∑–∏–π..."
    local merge_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic merge heads -m "Merge multiple heads - auto-generated by melsu_control" 2>&1)
    
    if [ $? -eq 0 ]; then
        log_success "‚úÖ Merge —Ä–µ–≤–∏–∑–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        echo "$merge_output"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é merge —Ä–µ–≤–∏–∑–∏—é
        log_info "–ü—Ä–∏–º–µ–Ω—è—é merge —Ä–µ–≤–∏–∑–∏—é..."
        sudo -u melsu $BACKEND_PATH/venv/bin/alembic upgrade head
        
        if [ $? -eq 0 ]; then
            log_success "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–∏–≥—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
            return 0
        else
            log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ merge —Ä–µ–≤–∏–∑–∏–∏"
            return 1
        fi
    else
        log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ merge —Ä–µ–≤–∏–∑–∏–∏:"
        echo "$merge_output"
        return 1
    fi
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
apply_migrations() {
    log_step "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    cd $BACKEND_PATH
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    log_debug "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–π..."
    local heads_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic heads 2>&1)
    local heads_count=$(echo "$heads_output" | grep -c "^[a-f0-9]\{12\}")
    
    if [ $heads_count -gt 1 ]; then
        log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–∏–≥—Ä–∞—Ü–∏–π. –ò—Å–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
        fix_migration_conflicts
        if [ $? -ne 0 ]; then
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–∏–≥—Ä–∞—Ü–∏–π"
            return 1
        fi
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏—è—Ö
    log_debug "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏—è—Ö..."
    local current_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic current 2>&1)
    echo "–¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è: $current_output"
    
    local heads_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic heads 2>&1)
    echo "Head —Ä–µ–≤–∏–∑–∏—è: $heads_output"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    local current_rev=$(echo "$current_output" | grep -o '[a-f0-9]\{12\}' | head -1)
    local head_rev=$(echo "$heads_output" | grep -o '[a-f0-9]\{12\}' | head -1)
    
    if [ -z "$current_rev" ]; then
        log_warning "–¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ë–î –ø—É—Å—Ç–∞—è."
        current_rev="empty"
    fi
    
    if [ -z "$head_rev" ]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å head —Ä–µ–≤–∏–∑–∏—é"
        return 1
    fi
    
    if [ "$current_rev" != "$head_rev" ]; then
        log_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ–Ω—è—é..."
        log_debug "–¢–µ–∫—É—â–∞—è: $current_rev, Head: $head_rev"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
        log_debug "–ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:"
        sudo -u melsu $BACKEND_PATH/venv/bin/alembic history -r$current_rev:head 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        local upgrade_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic upgrade head 2>&1)
        if [ $? -eq 0 ]; then
            log_success "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
            echo "$upgrade_output"
        else
            log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:"
            echo "$upgrade_output"
            return 1
        fi
    else
        log_info "‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã (—Ä–µ–≤–∏–∑–∏—è: $current_rev)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î
backup_database() {
    log_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    local backup_dir="/var/backups/melsu"
    local backup_file="$backup_dir/melsu_db_$(date +%Y%m%d_%H%M%S).sql"
    
    mkdir -p $backup_dir
    sudo -u postgres pg_dump melsu_db > $backup_file
    
    if [ $? -eq 0 ]; then
        log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_file"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        find $backup_dir -name "melsu_db_*.sql" -mtime +7 -delete
    else
        log_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
update_project() {
    log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    backup_database
    
    cd $PROJECT_PATH
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    git fetch origin main
    local local_commit=$(git rev-parse HEAD)
    local remote_commit=$(git rev-parse origin/main)
    
    if [ "$local_commit" = "$remote_commit" ]; then
        log_info "–ü—Ä–æ–µ–∫—Ç —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω"
        return 0
    fi
    
    log_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
    git pull origin main
    
    if [ $? -ne 0 ]; then
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        return 1
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º backend
    log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    cd $BACKEND_PATH
    sudo -u melsu $BACKEND_PATH/venv/bin/pip install -r requirements.txt
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    apply_migrations
    
    # –û–±–Ω–æ–≤–ª—è–µ–º frontend
    log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞ frontend..."
    cd $FRONTEND_PATH
    sudo -u melsu npm install
    sudo -u melsu npm run build
    
    log_success "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
safe_restart() {
    log_step "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≥–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    if ! systemctl is-active --quiet postgresql; then
        log_error "PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é..."
        systemctl start postgresql
    fi
    
    if ! systemctl is-active --quiet redis-server; then
        log_error "Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é..."
        systemctl start redis-server
    fi
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Celery Worker..."
    systemctl restart melsu-worker
    
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ API..."
    systemctl restart melsu-api
    
    # –ñ–¥–µ–º, –ø–æ–∫–∞ API –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API..."
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    local retries=0
    while [ $retries -lt 10 ]; do
        if curl -s http://localhost:8000/health > /dev/null; then
            break
        fi
        sleep 2
        retries=$((retries + 1))
    done
    
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx..."
    systemctl restart nginx
    
    log_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
full_update() {
    log_info "üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    systemctl stop melsu-api melsu-worker
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    update_project
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    safe_restart
    
    log_success "‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_system() {
    echo -e "${BLUE}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã MELSU Portal${NC}"
    echo "=================================="
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    echo -e "\n${YELLOW}–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    check_service_status "postgresql"
    check_service_status "redis-server"
    check_service_status "nginx"
    check_service_status "melsu-api"
    check_service_status "melsu-worker"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    echo -e "\n${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ API:${NC}"
    check_api_health
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    echo -e "\n${YELLOW}–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:${NC}"
    check_database
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    echo -e "\n${YELLOW}–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π:${NC}"
    cd $BACKEND_PATH
    local current_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic current 2>&1)
    local heads_output=$(sudo -u melsu $BACKEND_PATH/venv/bin/alembic heads 2>&1)
    local heads_count=$(echo "$heads_output" | grep -c "^[a-f0-9]\{12\}")
    
    echo "–¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è: $(echo "$current_output" | grep -o '[a-f0-9]\{12\}' | head -1 || echo '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')"
    echo "Head —Ä–µ–≤–∏–∑–∏—è: $(echo "$heads_output" | grep -o '[a-f0-9]\{12\}' | head -1 || echo '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')"
    
    if [ $heads_count -gt 1 ]; then
        echo -e "${RED}‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–∏–≥—Ä–∞—Ü–∏–π: –Ω–∞–π–¥–µ–Ω–æ $heads_count head —Ä–µ–≤–∏–∑–∏–π${NC}"
    else
        echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ${NC}"
    fi
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    echo -e "\n${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:${NC}"
    echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')"
    echo "RAM: $(free -h | awk 'NR==2{printf "%.1f%% (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è %s –∏–∑ %s)", $3*100/$2, $3, $2}')"
    echo "–î–∏—Å–∫: $(df -h / | awk 'NR==2{printf "%s –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ %s (%s)", $3, $2, $5}')"
    
    # –°—Ç–∞—Ç—É—Å Git
    echo -e "\n${YELLOW}Git —Å—Ç–∞—Ç—É—Å:${NC}"
    cd $PROJECT_PATH
    local current_branch=$(git branch --show-current)
    local last_commit=$(git log -1 --pretty=format:"%h - %s (%cr)")
    echo "–í–µ—Ç–∫–∞: $current_branch"
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $last_commit"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    git fetch origin main > /dev/null 2>&1
    local commits_behind=$(git rev-list --count HEAD..origin/main)
    if [ $commits_behind -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $commits_behind –∫–æ–º–º–∏—Ç–æ–≤${NC}"
    else
        echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç –∞–∫—Ç—É–∞–ª–µ–Ω${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$1" in
        start)
            log_info "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
            systemctl start postgresql redis-server melsu-api melsu-worker nginx
            log_success "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
            ;;
        stop)
            log_info "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
            systemctl stop melsu-api melsu-worker
            log_success "‚èπÔ∏è –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            ;;
        restart)
            log_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            safe_restart
            ;;
        update)
            full_update
            ;;
        migrate)
            apply_migrations
            ;;
        fix-migrations)
            fix_migration_conflicts
            ;;
        diagnose-migrations)
            diagnose_migrations
            ;;
        backup)
            backup_database
            ;;
        status)
            monitor_system
            ;;
        logs)
            echo -e "${BLUE}üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫):${NC}"
            echo "======================================"
            echo -e "\n${YELLOW}API –ª–æ–≥–∏:${NC}"
            journalctl -u melsu-api -n 20 --no-pager
            echo -e "\n${YELLOW}Worker –ª–æ–≥–∏:${NC}"
            journalctl -u melsu-worker -n 20 --no-pager
            echo -e "\n${YELLOW}Nginx –ª–æ–≥–∏:${NC}"
            tail -20 /var/log/nginx/error.log
            ;;
        live-logs)
            echo -e "${BLUE}üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...${NC}"
            journalctl -u melsu-api -u melsu-worker -f
            ;;
        test)
            echo -e "${BLUE}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
            echo "========================"
            echo "Backend API:"
            curl -s -w "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %{time_total}s\n" http://localhost:8000/health || echo "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            echo -e "\nFrontend —á–µ—Ä–µ–∑ Nginx:"
            curl -s -I http://localhost/ | head -1 || echo "Nginx –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            echo -e "\n–ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket:"
            curl -s -I -H "Upgrade: websocket" http://localhost:8000/ws || echo "WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            ;;
        ssl)
            log_info "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
            certbot --nginx -d melsu.local -d www.melsu.local
            log_success "üîí SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            ;;
        deploy)
            log_info "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
            bash /var/www/melsu/deploy.sh
            ;;
        *)
            echo -e "${BLUE}üöÄ MELSU Portal - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}"
            echo "====================================="
            echo ""
            echo -e "${YELLOW}–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
            echo "  start       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
            echo "  stop        - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            echo "  restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
            echo "  update      - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å Git –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
            echo "  status      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
            echo ""
            echo -e "${YELLOW}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î:${NC}"
            echo "  migrate           - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î"
            echo "  fix-migrations    - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–π"
            echo "  diagnose-migrations - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
            echo "  backup            - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"
            echo ""
            echo -e "${YELLOW}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}"
            echo "  logs        - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
            echo "  live-logs   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo "  test        - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
            echo ""
            echo -e "${YELLOW}–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:${NC}"
            echo "  ssl         - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
            echo "  deploy      - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
            echo ""
            echo -e "${GREEN}–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:${NC}"
            echo "  melsu update             # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
            echo "  melsu status             # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            echo "  melsu fix-migrations     # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–π"
            echo "  melsu diagnose-migrations # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π"
            echo "  melsu live-logs          # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 