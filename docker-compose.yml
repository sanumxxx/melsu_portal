version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: melsu_postgres
    environment:
      POSTGRES_DB: melsu_db
      POSTGRES_USER: melsu_user
      POSTGRES_PASSWORD: MelsuPortal2024!
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - melsu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U melsu_user -d melsu_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кэширования и сессий
  redis:
    image: redis:7-alpine
    container_name: melsu_redis
    command: redis-server --appendonly yes --requirepass "MelsuRedis2024!"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - melsu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "MelsuRedis2024!", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: melsu_backend
    environment:
      - DATABASE_URL=postgresql://melsu_user:MelsuPortal2024!@postgres:5432/melsu_db
      - REDIS_URL=redis://:MelsuRedis2024!@redis:6379
      - SECRET_KEY=melsu-super-secret-key-change-in-production
      - DEBUG=False
      - ALLOWED_HOSTS=localhost,127.0.0.1,melsu.local
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - melsu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker для фоновых задач
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: melsu_celery_worker
    command: celery -A app.main worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://melsu_user:MelsuPortal2024!@postgres:5432/melsu_db
      - REDIS_URL=redis://:MelsuRedis2024!@redis:6379
      - SECRET_KEY=melsu-super-secret-key-change-in-production
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - melsu_network
    restart: unless-stopped

  # Celery Beat для периодических задач
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: melsu_celery_beat
    command: celery -A app.main beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://melsu_user:MelsuPortal2024!@postgres:5432/melsu_db
      - REDIS_URL=redis://:MelsuRedis2024!@redis:6379
      - SECRET_KEY=melsu-super-secret-key-change-in-production
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - melsu_network
    restart: unless-stopped

  # Frontend (React SPA)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:8000
    container_name: melsu_frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - melsu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx как reverse proxy
  nginx:
    image: nginx:alpine
    container_name: melsu_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./backend/uploads:/var/www/uploads:ro
      - ./backend/static:/var/www/static:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - melsu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Мониторинг с Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: melsu_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - melsu_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana для визуализации метрик (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: melsu_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=MelsuGrafana2024!
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - melsu_network
    restart: unless-stopped
    profiles:
      - monitoring

# Тома для постоянного хранения данных
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Сеть для связи между контейнерами
networks:
  melsu_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 