#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ uploads –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
"""

import os
import sys
import requests
from pathlib import Path

def test_uploads_configuration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ uploads"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ uploads...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    script_dir = Path(__file__).parent
    backend_dir = script_dir
    uploads_dir = backend_dir / "uploads"
    announcements_dir = uploads_dir / "announcements"
    
    print(f"üìÅ Backend directory: {backend_dir}")
    print(f"üìÅ Uploads directory: {uploads_dir}")
    print(f"üìÅ Announcements directory: {announcements_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫
    print(f"‚úÖ Uploads exists: {uploads_dir.exists()}")
    print(f"‚úÖ Announcements exists: {announcements_dir.exists()}")
    
    if uploads_dir.exists():
        files = list(uploads_dir.iterdir())
        print(f"üìÑ Files in uploads: {len(files)}")
        for file in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            print(f"   - {file.name}")
    
    if announcements_dir.exists():
        files = list(announcements_dir.iterdir())
        print(f"üìÑ Files in announcements: {len(files)}")
        for file in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            print(f"   - {file.name}")
    
    return uploads_dir, announcements_dir

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        print(f"‚úÖ Health check: {response.status_code} - {response.json()}")
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º debug uploads
    try:
        response = requests.get(f"{base_url}/debug/uploads", timeout=5)
        print(f"‚úÖ Debug uploads: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   üìÅ Uploads directory: {data.get('uploads_directory')}")
            print(f"   üìÅ Uploads exists: {data.get('uploads_exists')}")
            print(f"   üìÅ Announcements exists: {data.get('announcements_exists')}")
            print(f"   üìÑ Announcements files: {data.get('announcements_files_count')}")
    except Exception as e:
        print(f"‚ùå Debug uploads failed: {e}")
    
    return True

def create_test_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    _, announcements_dir = test_uploads_configuration()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = announcements_dir / "test.txt"
    test_file.write_text("Test file for uploads diagnosis")
    
    print(f"‚úÖ Created test file: {test_file}")
    return test_file

def test_static_access():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º...")
    
    test_file = create_test_file()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ HTTP
    base_url = "http://localhost:8000"
    file_url = f"{base_url}/uploads/announcements/test.txt"
    
    try:
        response = requests.get(file_url, timeout=5)
        print(f"‚úÖ Static file access: {response.status_code}")
        if response.status_code == 200:
            print(f"   üìÑ Content: {response.text[:50]}...")
        else:
            print(f"   ‚ùå Expected 200, got {response.status_code}")
    except Exception as e:
        print(f"‚ùå Static file access failed: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file.unlink()
    print(f"üóëÔ∏è Removed test file")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ uploads –¥–ª—è MelSU Portal")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_uploads_configuration()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    if test_api_endpoints():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        test_static_access()
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ localhost:8000")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ uploads")

if __name__ == "__main__":
    main() 