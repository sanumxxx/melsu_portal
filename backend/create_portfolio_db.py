#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ PostgreSQL
"""

import os
import sys
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
env_path = os.path.join(project_root, '.env')
load_dotenv(dotenv_path=env_path)

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL}")

# SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
CREATE_PORTFOLIO_SQL = """
-- –°–æ–∑–¥–∞–µ–º enum –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
DO $$ BEGIN
    CREATE TYPE achievementcategory AS ENUM (
        'academic', 
        'sports', 
        'creative', 
        'volunteer', 
        'professional'
    );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
CREATE TABLE IF NOT EXISTS portfolio_achievements (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR NOT NULL,
    description TEXT,
    category achievementcategory NOT NULL,
    achievement_date TIMESTAMP WITH TIME ZONE NOT NULL,
    organization VARCHAR,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE
);

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
CREATE INDEX IF NOT EXISTS ix_portfolio_achievements_id ON portfolio_achievements(id);
CREATE INDEX IF NOT EXISTS ix_portfolio_achievements_user_id ON portfolio_achievements(user_id);

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ñ–∞–π–ª–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
CREATE TABLE IF NOT EXISTS portfolio_files (
    id SERIAL PRIMARY KEY,
    achievement_id INTEGER NOT NULL REFERENCES portfolio_achievements(id) ON DELETE CASCADE,
    filename VARCHAR NOT NULL,
    original_filename VARCHAR NOT NULL,
    file_path VARCHAR NOT NULL,
    file_size INTEGER NOT NULL,
    content_type VARCHAR NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
CREATE INDEX IF NOT EXISTS ix_portfolio_files_id ON portfolio_files(id);
CREATE INDEX IF NOT EXISTS ix_portfolio_files_achievement_id ON portfolio_files(achievement_id);
"""

def main():
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine(DATABASE_URL)
        
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        with engine.connect() as connection:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º autocommit –¥–ª—è DDL –æ–ø–µ—Ä–∞—Ü–∏–π
            connection = connection.execution_options(autocommit=True)
            connection.execute(text(CREATE_PORTFOLIO_SQL))
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
        print("   ‚Ä¢ enum achievementcategory")
        print("   ‚Ä¢ —Ç–∞–±–ª–∏—Ü–∞ portfolio_achievements")
        print("   ‚Ä¢ —Ç–∞–±–ª–∏—Ü–∞ portfolio_files")
        print("   ‚Ä¢ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 