#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backend –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv(dotenv_path=os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

from app.core.config import settings
from app.database import engine
from sqlalchemy import text

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("=" * 60)
    print("         –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò BACKEND")
    print("=" * 60)
    
    print(f"üîß DATABASE_URL: {settings.DATABASE_URL}")
    print(f"üîê SECRET_KEY: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if settings.SECRET_KEY != 'melgu-super-secret-key-2025-change-in-production' else '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
    print(f"‚è∞ TOKEN_EXPIRE: {settings.ACCESS_TOKEN_EXPIRE_MINUTES} –º–∏–Ω—É—Ç")
    print(f"üìß MAIL_FROM: {settings.MAIL_FROM}")
    print(f"üñ•Ô∏è  HOST:PORT: {settings.HOST}:{settings.PORT}")
    print(f"üåç ENVIRONMENT: {settings.ENVIRONMENT}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if "postgresql" in settings.DATABASE_URL.lower():
        print("‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø POSTGRESQL")
        return test_postgresql_connection()
    elif "sqlite" in settings.DATABASE_URL.lower():
        print("‚ö†Ô∏è  –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø SQLITE")
        return test_sqlite_connection()
    else:
        print("‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        return False

def test_postgresql_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
        
        with engine.connect() as connection:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
            result = connection.execute(text("SELECT version();"))
            version = result.fetchone()[0]
            print(f"‚úÖ PostgreSQL –≤–µ—Ä—Å–∏—è: {version[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            result = connection.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """))
            tables = [row[0] for row in result.fetchall()]
            
            if tables:
                print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: {', '.join(tables)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if 'users' in tables:
                    result = connection.execute(text("SELECT COUNT(*) FROM users;"))
                    user_count = result.fetchone()[0]
                    print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
                    
                if 'email_verifications' in tables:
                    result = connection.execute(text("SELECT COUNT(*) FROM email_verifications;"))
                    verification_count = result.fetchone()[0]
                    print(f"üìß –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_count}")
            else:
                print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: python -m alembic upgrade head")
        
        print("‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö POSTGRESQL –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö POSTGRESQL: {e}")
        return False

def test_sqlite_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite"""
    try:
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite...")
        
        with engine.connect() as connection:
            result = connection.execute(text("SELECT name FROM sqlite_master WHERE type='table';"))
            tables = [row[0] for row in result.fetchall()]
            
            if tables:
                print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: {', '.join(tables)}")
            else:
                print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print("‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SQLITE –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SQLITE: {e}")
        return False

if __name__ == "__main__":
    success = test_configuration()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nBackend –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É:")
        print("python -m uvicorn app.main:app --reload --port 8000")
    else:
        print("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω DATABASE_URL")
        print("3. –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL —Å–µ—Ä–≤–µ—Ä")
        print("4. –í—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    print("=" * 60)
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(0 if success else 1) 