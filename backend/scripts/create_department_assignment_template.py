#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/–≥—Ä—É–ø–ø–µ/–∫–∞—Ñ–µ–¥—Ä–µ
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)) + '/../')

from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.models.request_template import RequestTemplate
from app.models.field import Field, FieldType
from app.models.department import Department
from app.models.group import Group

def create_department_assignment_template():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/–≥—Ä—É–ø–ø–µ/–∫–∞—Ñ–µ–¥—Ä–µ"""
    
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        existing_template = db.query(RequestTemplate).filter(
            RequestTemplate.name == "–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/–≥—Ä—É–ø–ø–µ/–∫–∞—Ñ–µ–¥—Ä–µ"
        ).first()
        
        if existing_template:
            print("‚ùå –®–∞–±–ª–æ–Ω '–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/–≥—Ä—É–ø–ø–µ/–∫–∞—Ñ–µ–¥—Ä–µ' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏
        template = RequestTemplate(
            name="–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/–≥—Ä—É–ø–ø–µ/–∫–∞—Ñ–µ–¥—Ä–µ",
            description="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É, –≥—Ä—É–ø–ø–µ –∏ –∫–∞—Ñ–µ–¥—Ä–µ",
            deadline_days=7,
            is_active=True,
            routing_type="department",
            auto_assign_enabled=True,
            auto_role_assignment_enabled=True,
            role_assignment_rules=[
                {
                    "condition": "always",
                    "action": "update_profile",
                    "fields": ["faculty", "department", "group_id"]
                }
            ]
        )
        
        db.add(template)
        db.commit()
        db.refresh(template)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏: {template.name} (ID: {template.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
        select_type = db.query(FieldType).filter(FieldType.name == "select").first()
        if not select_type:
            select_type = FieldType(
                name="select",
                label="–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫",
                description="–ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
                input_type="select",
                has_options=True
            )
            db.add(select_type)
            db.commit()
            db.refresh(select_type)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
        faculties = db.query(Department).filter(
            Department.department_type == "faculty",
            Department.is_active == True
        ).all()
        
        faculty_options = [{"value": str(f.id), "label": f.name} for f in faculties]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ "–§–∞–∫—É–ª—å—Ç–µ—Ç"
        faculty_field = Field(
            template_id=template.id,
            field_type_id=select_type.id,
            name="faculty_id",
            label="–§–∞–∫—É–ª—å—Ç–µ—Ç",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã",
            is_required=True,
            is_visible=True,
            sort_order=1,
            options=faculty_options,
            profile_field_mapping="faculty_id",
            update_profile_on_approve=True
        )
        
        db.add(faculty_field)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ñ–µ–¥—Ä
        departments = db.query(Department).filter(
            Department.department_type.in_(["department", "chair"]),
            Department.is_active == True
        ).all()
        
        department_options = [{"value": str(d.id), "label": d.name} for d in departments]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ "–ö–∞—Ñ–µ–¥—Ä–∞"
        department_field = Field(
            template_id=template.id,
            field_type_id=select_type.id,
            name="department_id",
            label="–ö–∞—Ñ–µ–¥—Ä–∞",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã",
            is_required=True,
            is_visible=True,
            sort_order=2,
            options=department_options,
            profile_field_mapping="department_id",
            update_profile_on_approve=True
        )
        
        db.add(department_field)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        groups = db.query(Group).all()
        
        group_options = [{"value": str(g.id), "label": g.name} for g in groups]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ "–ì—Ä—É–ø–ø–∞"
        group_field = Field(
            template_id=template.id,
            field_type_id=select_type.id,
            name="group_id",
            label="–ì—Ä—É–ø–ø–∞",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã",
            is_required=True,
            is_visible=True,
            sort_order=3,
            options=group_options,
            profile_field_mapping="group_id",
            update_profile_on_approve=True
        )
        
        db.add(group_field)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
        text_type = db.query(FieldType).filter(FieldType.name == "textarea").first()
        if not text_type:
            text_type = FieldType(
                name="textarea",
                label="–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
                description="–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                input_type="textarea",
                has_options=False
            )
            db.add(text_type)
            db.commit()
            db.refresh(text_type)
        
        reason_field = Field(
            template_id=template.id,
            field_type_id=text_type.id,
            name="reason",
            label="–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
            description="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥–∞–Ω–Ω–æ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/–≥—Ä—É–ø–ø–µ/–∫–∞—Ñ–µ–¥—Ä–µ",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–≤–æ–¥ —Å –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.",
            is_required=True,
            is_visible=True,
            sort_order=4,
            profile_field_mapping=None,
            update_profile_on_approve=False
        )
        
        db.add(reason_field)
        
        db.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞:")
        print(f"  - –§–∞–∫—É–ª—å—Ç–µ—Ç (–ø—Ä–∏–≤—è–∑–∫–∞ –∫ profile.faculty_id)")
        print(f"  - –ö–∞—Ñ–µ–¥—Ä–∞ (–ø—Ä–∏–≤—è–∑–∫–∞ –∫ profile.department_id)")
        print(f"  - –ì—Ä—É–ø–ø–∞ (–ø—Ä–∏–≤—è–∑–∫–∞ –∫ profile.group_id)")
        print(f"  - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ:")
        print(f"  - –§–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {len(faculties)}")
        print(f"  - –ö–∞—Ñ–µ–¥—Ä: {len(departments)}")
        print(f"  - –ì—Ä—É–ø–ø: {len(groups)}")
        
        return template
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    create_department_assignment_template() 