#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è enum achievementcategory –≤ PostgreSQL
"""

import os
import sys
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
env_path = os.path.join(project_root, '.env')
load_dotenv(dotenv_path=env_path)

DATABASE_URL = os.getenv("DATABASE_URL")

def main():
    try:
        engine = create_engine(DATABASE_URL)
        
        with engine.connect() as connection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ enum
            result = connection.execute(text("""
                SELECT EXISTS (
                    SELECT 1 
                    FROM pg_type 
                    WHERE typname = 'achievementcategory'
                );
            """))
            
            exists = result.scalar()
            print(f"üîç Enum 'achievementcategory' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {exists}")
            
            if exists:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum
                result = connection.execute(text("""
                    SELECT unnest(enum_range(NULL::achievementcategory))::text;
                """))
                values = result.fetchall()
                print(f"üìã –ó–Ω–∞—á–µ–Ω–∏—è enum: {[v[0] for v in values]}")
            else:
                print("‚ùå Enum –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
                # –°–æ–∑–¥–∞–µ–º enum
                connection.execute(text("""
                    CREATE TYPE achievementcategory AS ENUM (
                        'academic', 
                        'sports', 
                        'creative', 
                        'volunteer', 
                        'professional'
                    );
                """))
                connection.commit()
                print("‚úÖ Enum —Å–æ–∑–¥–∞–Ω!")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 