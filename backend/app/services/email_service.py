import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header
from email.utils import formataddr
from typing import Optional, Tuple
import socket
import time
from ..core.config import settings

class EmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email-—Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ MELSU –ø–æ—á—Ç—É"""
    
    def __init__(self):
        self.smtp_server = settings.MAIL_SERVER
        self.smtp_port = settings.MAIL_PORT
        self.username = settings.MAIL_USERNAME
        self.password = settings.MAIL_PASSWORD
        self.from_email = settings.MAIL_FROM
        self.from_name = settings.MAIL_FROM_NAME
        
    def _test_dns_resolution(self, hostname: str, max_retries: int = 3) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                ip_address = socket.gethostbyname(hostname)
                print(f"[EMAIL] ‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {hostname} -> {ip_address}")
                return True
            except socket.gaierror as e:
                print(f"[EMAIL] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                continue
        
        print(f"[EMAIL] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å DNS –∏–º—è {hostname} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False
        
    def _add_anti_spam_headers(self, message: MIMEMultipart) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Å–ø–∞–º"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        message["From"] = formataddr((self.from_name, self.from_email))
        message["Reply-To"] = self.from_email
        message["Return-Path"] = self.from_email
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        message["Message-ID"] = f"<{int(time.time())}.{hash(str(time.time()))}@melsu.ru>"
        message["Date"] = time.strftime("%a, %d %b %Y %H:%M:%S %z", time.localtime())
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Å–ø–∞–º–∞
        message["X-Mailer"] = "–ú–µ–ª–ì–£ Portal v1.0"
        message["X-Priority"] = "3"
        message["X-MSMail-Priority"] = "Normal"
        message["Importance"] = "Normal"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏
        message["MIME-Version"] = "1.0"
        message["Content-Type"] = "multipart/alternative"
        
        print(f"[EMAIL] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Å–ø–∞–º–∞")
        
    def _create_verification_email_body(self, code: str, user_name: str = None) -> Tuple[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç HTML –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        
        user_greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!" if user_name else "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        
        # HTML –≤–µ—Ä—Å–∏—è
        html_body = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –ú–µ–ª–ì–£</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }}
        .container {{
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            border-bottom: 3px solid #dc2626;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }}
        .logo {{
            font-size: 24px;
            font-weight: bold;
            color: #dc2626;
            margin-bottom: 10px;
        }}
        .code-container {{
            background: linear-gradient(135deg, #dc2626, #ef4444);
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            margin: 25px 0;
        }}
        .verification-code {{
            font-size: 36px;
            font-weight: bold;
            letter-spacing: 8px;
            margin: 10px 0;
            font-family: 'Courier New', monospace;
        }}
        .warning {{
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }}
        .footer {{
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            color: #666;
            font-size: 14px;
        }}
        .support-info {{
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            font-size: 14px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div style="margin-bottom: 15px;">
                <img src="{getattr(settings, 'FRONTEND_URL', 'http://localhost:3000')}/logo.png" 
                     alt="–õ–æ–≥–æ—Ç–∏–ø –ú–µ–ª–ì–£" 
                     style="max-width: 150px; height: auto; display: block; margin: 0 auto; border-radius: 4px;"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                <div class="logo" style="display: none;">–ú–µ–ª–ì–£</div>
            </div>
            <div style="font-size: 16px; color: #666;">–ú–µ–ª–∏—Ç–æ–ø–æ–ª—å—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</div>
        </div>
        
        <h1 style="color: #dc2626; text-align: center;">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h1>
        
        <p>{user_greeting}</p>
        
        <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –ú–µ–ª–ì–£ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
        
        <div class="code-container">
            <div>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</div>
            <div class="verification-code">{code}</div>
        </div>
        
        <div class="warning">
            <strong>‚ö† –í–∞–∂–Ω–æ:</strong>
            <ul style="margin: 10px 0; padding-left: 20px;">
                <li>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç</li>
                <li>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º</li>
                <li>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ</li>
            </ul>
        </div>
        
        <div class="support-info">
            <strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</strong><br>
            Email: {settings.MAIL_FROM}<br>
            –°–∏—Å—Ç–µ–º–∞: –ü–æ—Ä—Ç–∞–ª –ú–µ–ª–ì–£
        </div>
        
        <div class="footer">
            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
            <p>&copy; 2025 –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</p>
        </div>
    </div>
</body>
</html>"""
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        text_body = f"""–ú–µ–ª–ì–£ - –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

{user_greeting}

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –ú–µ–ª–ì–£ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:

–ö–û–î: {code}

–í–ê–ñ–ù–û:
- –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
- –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
- –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {settings.MAIL_FROM}

–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
¬© 2025 –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"""
        
        return html_body, text_body
    
    def send_verification_code(self, to_email: str, code: str, user_name: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        print(f"[EMAIL] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ {code} –Ω–∞ {to_email}")
        print(f"[EMAIL] üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP:")
        print(f"[EMAIL]    –°–µ—Ä–≤–µ—Ä: {self.smtp_server}")
        print(f"[EMAIL]    –ü–æ—Ä—Ç: {self.smtp_port}")
        print(f"[EMAIL]    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username}")
        print(f"[EMAIL]    –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {self.from_name} <{self.from_email}>")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DNS
        print(f"[EMAIL] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ...")
        if not self._test_dns_resolution(self.smtp_server):
            print(f"[EMAIL ERROR] ‚ùå DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ –¥–ª—è {self.smtp_server}")
            return False
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                print(f"[EMAIL] üìù –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞...")
                html_body, text_body = self._create_verification_email_body(code, user_name)
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                print(f"[EMAIL] üìß –§–æ—Ä–º–∏—Ä—É–µ–º MIME —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                message = MIMEMultipart("alternative")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                message["Subject"] = Header(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ú–µ–ª–ì–£: {code}", 'utf-8')
                message["To"] = to_email
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Å–ø–∞–º–∞
                self._add_anti_spam_headers(message)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏ HTML —á–∞—Å—Ç–∏
                text_part = MIMEText(text_body, "plain", "utf-8")
                html_part = MIMEText(html_body, "html", "utf-8")
                
                message.attach(text_part)
                message.attach(html_part)
                print(f"[EMAIL] ‚úÖ MIME —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP —Å STARTTLS –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
                print(f"[EMAIL] üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É {self.smtp_server}:{self.smtp_port}...")
                context = ssl.create_default_context()
                context.check_hostname = False
                context.verify_mode = ssl.CERT_NONE
                
                with smtplib.SMTP(self.smtp_server, self.smtp_port, timeout=30) as server:
                    print(f"[EMAIL] ‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    
                    print(f"[EMAIL] üîê –í–∫–ª—é—á–∞–µ–º STARTTLS...")
                    server.starttls(context=context)
                    print(f"[EMAIL] ‚úÖ STARTTLS –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    
                    print(f"[EMAIL] üë§ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.username}...")
                    server.login(self.username, self.password)
                    print(f"[EMAIL] ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    
                    print(f"[EMAIL] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –æ—Ç {self.from_email} –∫ {to_email}...")
                    text = message.as_string()
                    server.sendmail(self.from_email, to_email, text)
                    print(f"[EMAIL] ‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                
                print(f"[EMAIL] üéâ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
                return True
                
            except socket.gaierror as e:
                print(f"[EMAIL ERROR] ‚ùå DNS –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
                print(f"[EMAIL ERROR] üêû –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                if attempt < max_retries - 1:
                    delay = 2 ** attempt
                    print(f"[EMAIL] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(delay)
                    continue
                else:
                    print(f"[EMAIL ERROR] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                    print(f"[EMAIL ERROR] üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    print(f"[EMAIL ERROR]    1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    print(f"[EMAIL ERROR]    2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS")
                    print(f"[EMAIL ERROR]    3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ {self.smtp_server} –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return False
                    
            except smtplib.SMTPAuthenticationError as e:
                print(f"[EMAIL ERROR] ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {str(e)}")
                print(f"[EMAIL ERROR] üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å: {self.username}")
                return False
                
            except smtplib.SMTPConnectError as e:
                print(f"[EMAIL ERROR] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
                print(f"[EMAIL ERROR] üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä/–ø–æ—Ä—Ç: {self.smtp_server}:{self.smtp_port}")
                if attempt < max_retries - 1:
                    delay = 2 ** attempt
                    print(f"[EMAIL] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(delay)
                    continue
                else:
                    return False
                    
            except smtplib.SMTPRecipientsRefused as e:
                print(f"[EMAIL ERROR] ‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {str(e)}")
                print(f"[EMAIL ERROR] üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∞–¥—Ä–µ—Å: {to_email}")
                return False
                
            except smtplib.SMTPException as e:
                print(f"[EMAIL ERROR] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ SMTP –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
                if attempt < max_retries - 1:
                    delay = 2 ** attempt
                    print(f"[EMAIL] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(delay)
                    continue
                else:
                    return False
                    
            except Exception as e:
                print(f"[EMAIL ERROR] ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ {to_email}: {str(e)}")
                print(f"[EMAIL ERROR] üêû –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                if attempt < max_retries - 1:
                    delay = 2 ** attempt
                    print(f"[EMAIL] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(delay)
                    continue
                else:
                    return False
        
        return False
    
    def send_password_reset_code(self, to_email: str, code: str, user_name: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
        try:
            user_greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!" if user_name else "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
            
            html_body = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - –ú–µ–ª–ì–£</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8f9fa; }}
        .container {{ background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ text-align: center; border-bottom: 3px solid #dc2626; padding-bottom: 20px; margin-bottom: 30px; }}
        .logo {{ font-size: 24px; font-weight: bold; color: #dc2626; margin-bottom: 10px; }}
        .code-container {{ background: linear-gradient(135deg, #dc2626, #ef4444); color: white; padding: 20px; border-radius: 8px; text-align: center; margin: 25px 0; }}
        .verification-code {{ font-size: 36px; font-weight: bold; letter-spacing: 8px; margin: 10px 0; font-family: 'Courier New', monospace; }}
        .warning {{ background-color: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .footer {{ text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 14px; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div style="margin-bottom: 15px;">
                <img src="{getattr(settings, 'FRONTEND_URL', 'http://localhost:3000')}/logo.png" 
                     alt="–õ–æ–≥–æ—Ç–∏–ø –ú–µ–ª–ì–£" 
                     style="max-width: 150px; height: auto; display: block; margin: 0 auto; border-radius: 4px;"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                <div class="logo" style="display: none;">–ú–µ–ª–ì–£</div>
            </div>
            <div style="font-size: 16px; color: #666;">–ú–µ–ª–∏—Ç–æ–ø–æ–ª—å—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</div>
        </div>
        <h1 style="color: #dc2626; text-align: center;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h1>
        <p>{user_greeting}</p>
        <p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –ú–µ–ª–ì–£ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:</p>
        <div class="code-container">
            <div>–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:</div>
            <div class="verification-code">{code}</div>
        </div>
        <div class="warning">
            <strong>‚ö† –í–∞–∂–Ω–æ:</strong>
            <ul style="margin: 10px 0; padding-left: 20px;">
                <li>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç</li>
                <li>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ</li>
            </ul>
        </div>
        <div class="footer">
            <p>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {self.from_email}</p>
            <p>&copy; 2025 –ú–µ–ª–∏—Ç–æ–ø–æ–ª—å—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</p>
        </div>
    </div>
</body>
</html>"""
            
            message = MIMEMultipart("alternative")
            message["Subject"] = Header(f"–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ú–µ–ª–ì–£: {code}", 'utf-8')
            message["To"] = to_email
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Å–ø–∞–º–∞
            self._add_anti_spam_headers(message)
            
            html_part = MIMEText(html_body, "html", "utf-8")
            message.attach(html_part)
            
            context = ssl.create_default_context()
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE

            
            with smtplib.SMTP(self.smtp_server, self.smtp_port, timeout=30) as server:
                server.starttls(context=context)
                server.login(self.username, self.password)
                text = message.as_string()
                server.sendmail(self.from_email, to_email, text)
            
            print(f"[EMAIL] Password reset code sent successfully to {to_email}")
            return True
            
        except Exception as e:
            print(f"[EMAIL ERROR] Failed to send password reset code to {to_email}: {str(e)}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
email_service = EmailService() 