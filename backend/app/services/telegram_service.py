import aiohttp
import asyncio
import logging
from typing import Optional, List, Dict, Any
from sqlalchemy.orm import Session
from ..core.config import settings
from ..models.user_profile import UserProfile
from ..models.user import User

logger = logging.getLogger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_message(
        self, 
        chat_id: str, 
        text: str, 
        parse_mode: str = "HTML",
        disable_web_page_preview: bool = False
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode,
                "disable_web_page_preview": disable_web_page_preview
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        logger.info(f"Message sent to Telegram chat {chat_id}")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"Failed to send Telegram message to {chat_id}: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"Error sending Telegram message to {chat_id}: {e}")
            return False
    
    async def send_notification_to_user(
        self,
        db: Session,
        user_id: int,
        title: str,
        message: str,
        url: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID
            profile = db.query(UserProfile).filter(UserProfile.user_id == user_id).first()
            
            if not profile or not profile.telegram_id:
                logger.info(f"User {user_id} doesn't have Telegram connected")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == user_id).first()
            user_name = f"{user.first_name} {user.last_name}" if user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = f"<b>{title}</b>\n\n{message}"
            
            if url:
                text += f"\n\nüîó <a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ</a>"
            
            text += f"\n\nüìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è: {user_name}"
            text += f"\nüè´ –°–∏—Å—Ç–µ–º–∞ –ú–µ–ª–ì–£"
            
            return await self.send_message(profile.telegram_id, text)
            
        except Exception as e:
            logger.error(f"Error sending notification to user {user_id}: {e}")
            return False
    
    async def send_bulk_notifications(
        self,
        db: Session,
        user_ids: List[int],
        title: str,
        message: str,
        url: Optional[str] = None
    ) -> Dict[str, int]:
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        results = {"sent": 0, "failed": 0, "no_telegram": 0}
        
        tasks = []
        for user_id in user_ids:
            task = self.send_notification_to_user(db, user_id, title, message, url)
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        task_results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for result in task_results:
            if isinstance(result, Exception):
                results["failed"] += 1
            elif result is True:
                results["sent"] += 1
            elif result is False:
                results["no_telegram"] += 1
            else:
                results["failed"] += 1
        
        logger.info(f"Bulk notification results: {results}")
        return results
    
    async def send_assignment_notification(
        self,
        db: Session,
        user_id: int,
        assignment_title: str,
        assignment_description: str,
        due_date: Optional[str] = None
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏"""
        title = "üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        
        message = f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n<b>{assignment_title}</b>"
        
        if assignment_description:
            message += f"\n\n{assignment_description}"
        
        if due_date:
            message += f"\n\n‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {due_date}"
        
        url = f"https://my.melsu.ru/assignments"
        
        return await self.send_notification_to_user(db, user_id, title, message, url)
    
    async def send_request_notification(
        self,
        db: Session,
        user_id: int,
        request_title: str,
        request_status: str,
        request_id: int
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        title = "üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"
        
        status_messages = {
            "approved": "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
            "rejected": "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", 
            "in_progress": "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "completed": "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        }
        
        status_text = status_messages.get(request_status, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {request_status}")
        
        message = f"{status_text}\n\n<b>–ó–∞—è–≤–∫–∞:</b> {request_title}"
        
        url = f"https://my.melsu.ru/requests/{request_id}"
        
        return await self.send_notification_to_user(db, user_id, title, message, url)
    
    async def send_announcement_notification(
        self,
        db: Session,
        user_ids: List[int],
        announcement_title: str,
        announcement_content: str
    ) -> Dict[str, int]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        title = "üì¢ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        
        message = f"<b>{announcement_title}</b>\n\n{announcement_content}"
        
        url = f"https://my.melsu.ru/announcements"
        
        return await self.send_bulk_notifications(db, user_ids, title, message, url)
    
    async def set_webhook(self, webhook_url: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
        try:
            url = f"{self.base_url}/setWebhook"
            data = {"url": webhook_url}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            logger.info(f"Webhook set successfully: {webhook_url}")
                            return True
                        else:
                            logger.error(f"Failed to set webhook: {result}")
                            return False
                    else:
                        logger.error(f"Failed to set webhook: HTTP {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"Error setting webhook: {e}")
            return False
    
    async def get_bot_info(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            url = f"{self.base_url}/getMe"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            return result.get("result")
                    return None
                    
        except Exception as e:
            logger.error(f"Error getting bot info: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramService() 