import os
from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from alembic.config import Config
from alembic import command
import logging
from .core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:password@localhost/university_portal")

# –î–ª—è SQLite –¥–æ–±–∞–≤–ª—è–µ–º connect_args
connect_args = {"check_same_thread": False} if "sqlite" in settings.DATABASE_URL else {}

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ SQLAlchemy
engine = create_engine(
    settings.DATABASE_URL,
    connect_args=connect_args
)

# –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def init_system_roles():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è engine
        from .models.role import Role
        from datetime import datetime
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏
        SYSTEM_ROLES = [
            {
                'name': 'admin',
                'display_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–º –ø–æ—Ä—Ç–∞–ª–æ–º.',
                'is_system': True,
                'is_active': True
            },
            {
                'name': 'manager',
                'display_name': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.',
                'is_system': True,
                'is_active': True
            },
            {
                'name': 'employee',
                'display_name': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                'description': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.',
                'is_system': True,
                'is_active': True
            },
            {
                'name': 'student',
                'display_name': '–°—Ç—É–¥–µ–Ω—Ç',
                'description': '–°—Ç—É–¥–µ–Ω—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.',
                'is_system': True,
                'is_active': True
            },
            {
                'name': 'teacher',
                'display_name': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
                'description': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.',
                'is_system': True,
                'is_active': True
            },
            {
                'name': 'guest',
                'display_name': '–ì–æ—Å—Ç—å',
                'description': '–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø.',
                'is_system': True,
                'is_active': True
            },
            {
                'name': 'schoolchild',
                'display_name': '–®–∫–æ–ª—å–Ω–∏–∫',
                'description': '–£—á–∞—â–∏–π—Å—è —à–∫–æ–ª—ã.',
                'is_system': True,
                'is_active': True
            },
            {
                'name': 'curator',
                'display_name': '–ö—É—Ä–∞—Ç–æ—Ä',
                'description': '–ö—É—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫—É—Ä—Å–∞.',
                'is_system': True,
                'is_active': True
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        db = SessionLocal()
        try:
            created_count = 0
            for role_data in SYSTEM_ROLES:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
                existing_role = db.query(Role).filter(Role.name == role_data['name']).first()
                
                if not existing_role:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å
                    new_role = Role(**role_data)
                    db.add(new_role)
                    created_count += 1
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: {role_data['display_name']} ({role_data['name']})")
            
            if created_count > 0:
                db.commit()
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π")
            else:
                logger.info("‚ÑπÔ∏è –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")
            db.rollback()
            raise
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å —Ä–æ–ª—è–º–∏
        pass

def run_migrations():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Alembic –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É alembic.ini
        current_dir = os.path.dirname(os.path.abspath(__file__))
        backend_dir = os.path.dirname(current_dir)
        alembic_cfg_path = os.path.join(backend_dir, "alembic.ini")
        
        if not os.path.exists(alembic_cfg_path):
            logger.warning("‚ö†Ô∏è –§–∞–π–ª alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏.")
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Alembic
        alembic_cfg = Config(alembic_cfg_path)
        alembic_cfg.set_main_option("script_location", os.path.join(backend_dir, "alembic"))
        alembic_cfg.set_main_option("sqlalchemy.url", DATABASE_URL)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ Alembic
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ alembic_version
            with engine.connect() as conn:
                result = conn.execute(text(
                    "SELECT table_name FROM information_schema.tables "
                    "WHERE table_name = 'alembic_version'"
                ))
                if not result.fetchone():
                    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)...")
                    command.stamp(alembic_cfg, "head")
                    logger.info("‚úÖ Alembic –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É alembic_version: {e}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        logger.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        command.upgrade(alembic_cfg, "head")
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQLAlchemy...")
        try:
            # Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQLAlchemy
            Base.metadata.create_all(bind=engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ SQLAlchemy")
        except Exception as fallback_error:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã: {fallback_error}")
            raise

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def initialize_database():
    """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not check_database_connection():
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    run_migrations()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏
    init_system_roles()
    
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞") 