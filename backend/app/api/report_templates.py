from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import func
from typing import List, Optional

from ..database import get_db
from ..models import ReportTemplate, Report, User
from ..schemas.report_template import (
    ReportTemplateCreate,
    ReportTemplateUpdate,
    ReportTemplateResponse,
    ReportTemplateList
)
from ..dependencies import get_current_user, UserInfo

router = APIRouter(prefix="/report-templates", tags=["Report Templates"])

def check_template_access(template: ReportTemplate, current_user: UserInfo, action: str = "view") -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —à–∞–±–ª–æ–Ω—É –æ—Ç—á–µ—Ç–∞"""
    
    # –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if "admin" in current_user.roles:
        return True
    
    # –°–æ–∑–¥–∞—Ç–µ–ª—å —à–∞–±–ª–æ–Ω–∞ –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if template.created_by_id == current_user.id:
        return True
    
    if action == "create_report":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        if template.allowed_roles:
            return any(role in current_user.roles for role in template.allowed_roles)
        return False
    
    if action == "view_reports":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤
        if template.viewers:
            for viewer in template.viewers:
                if viewer.get("type") == "role" and viewer.get("value") in current_user.roles:
                    return True
                if viewer.get("type") == "user" and viewer.get("value") == current_user.id:
                    return True
        return False
    
    return False

@router.post("/", response_model=ReportTemplateResponse)
async def create_report_template(
    template_data: ReportTemplateCreate,
    db: Session = Depends(get_db),
    current_user: UserInfo = Depends(get_current_user)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞"""
    
    print(f"üîß –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {template_data}")
    print(f"üîß –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞: {template_data.fields}")
    
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã
    if "admin" not in current_user.roles:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç—á–µ—Ç–æ–≤"
        )
    
    template = ReportTemplate(
        **template_data.dict(),
        created_by_id=current_user.id
    )
    
    print(f"üîß –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞: {template}")
    print(f"üîß –ü–æ–ª—è –≤ –æ–±—ä–µ–∫—Ç–µ: {template.fields}")
    
    db.add(template)
    db.commit()
    db.refresh(template)
    
    print(f"üîß –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {template.id}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
    template_with_creator = db.query(ReportTemplate).options(
        joinedload(ReportTemplate.creator)
    ).filter(ReportTemplate.id == template.id).first()
    
    result = ReportTemplateResponse.from_orm(template_with_creator)
    result.creator_name = f"{template_with_creator.creator.first_name} {template_with_creator.creator.last_name}"
    result.reports_count = 0
    
    print(f"üîß –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    return result

@router.get("/", response_model=List[ReportTemplateList])
async def get_report_templates(
    active_only: bool = Query(True, description="–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"),
    db: Session = Depends(get_db),
    current_user: UserInfo = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç—á–µ—Ç–æ–≤"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç—á–µ—Ç–æ–≤
    query = db.query(
        ReportTemplate.id,
        func.count(Report.id).label('reports_count')
    ).outerjoin(Report).group_by(ReportTemplate.id)
    
    if active_only:
        query = query.filter(ReportTemplate.is_active == True)
    
    template_counts = query.all()
    
    if not template_counts:
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º ID —à–∞–±–ª–æ–Ω–æ–≤
    template_ids = [tc[0] for tc in template_counts]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–∞—Ö
    templates = db.query(ReportTemplate).options(
        joinedload(ReportTemplate.creator)
    ).filter(ReportTemplate.id.in_(template_ids)).all()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç—á–µ—Ç–æ–≤
    counts_dict = {tc[0]: tc[1] for tc in template_counts}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç—É–ø—É
    if "admin" not in current_user.roles:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —à–∞–±–ª–æ–Ω—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        accessible_templates = []
        
        for template in templates:
            if (check_template_access(template, current_user, "create_report") or 
                check_template_access(template, current_user, "view_reports") or
                template.created_by_id == current_user.id):
                accessible_templates.append(template)
        
        templates = accessible_templates
    
    result = []
    for template in templates:
        reports_count = counts_dict.get(template.id, 0)
        
        template_item = ReportTemplateList(
            id=template.id,
            name=template.name,
            description=template.description,
            fields=template.fields,
            is_active=template.is_active,
            allowed_roles=template.allowed_roles,
            created_by_id=template.created_by_id,
            created_at=template.created_at,
            creator_name=f"{template.creator.first_name} {template.creator.last_name}",
            reports_count=reports_count
        )
        result.append(template_item)
    
    return result

@router.get("/{template_id}", response_model=ReportTemplateResponse)
async def get_report_template(
    template_id: int,
    db: Session = Depends(get_db),
    current_user: UserInfo = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ –ø–æ ID"""
    
    template = db.query(ReportTemplate).options(
        joinedload(ReportTemplate.creator)
    ).filter(ReportTemplate.id == template_id).first()
    
    if not template:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–®–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not check_template_access(template, current_user):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"
        )
    
    reports_count = db.query(func.count(Report.id)).filter(
        Report.template_id == template_id
    ).scalar()
    
    result = ReportTemplateResponse.from_orm(template)
    result.creator_name = f"{template.creator.first_name} {template.creator.last_name}"
    result.reports_count = reports_count
    
    return result

@router.put("/{template_id}", response_model=ReportTemplateResponse)
async def update_report_template(
    template_id: int,
    template_data: ReportTemplateUpdate,
    db: Session = Depends(get_db),
    current_user: UserInfo = Depends(get_current_user)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞"""
    
    template = db.query(ReportTemplate).filter(ReportTemplate.id == template_id).first()
    
    if not template:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–®–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if "admin" not in current_user.roles and template.created_by_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    update_data = template_data.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(template, field, value)
    
    db.commit()
    db.refresh(template)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
    template_with_creator = db.query(ReportTemplate).options(
        joinedload(ReportTemplate.creator)
    ).filter(ReportTemplate.id == template.id).first()
    
    reports_count = db.query(func.count(Report.id)).filter(
        Report.template_id == template_id
    ).scalar()
    
    result = ReportTemplateResponse.from_orm(template_with_creator)
    result.creator_name = f"{template_with_creator.creator.first_name} {template_with_creator.creator.last_name}"
    result.reports_count = reports_count
    
    return result

@router.delete("/{template_id}")
async def delete_report_template(
    template_id: int,
    db: Session = Depends(get_db),
    current_user: UserInfo = Depends(get_current_user)
):
    """–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞"""
    
    template = db.query(ReportTemplate).filter(ReportTemplate.id == template_id).first()
    
    if not template:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–®–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å
    if "admin" not in current_user.roles and template.created_by_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—á–µ—Ç—ã –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É
    reports_count = db.query(func.count(Report.id)).filter(
        Report.template_id == template_id
    ).scalar()
    
    if reports_count > 0:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–∑–¥–∞–Ω–æ {reports_count} –æ—Ç—á–µ—Ç–æ–≤"
        )
    
    db.delete(template)
    db.commit()
    
    return {"message": "–®–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ —É–¥–∞–ª–µ–Ω"}

@router.get("/{template_id}/accessible")
async def check_template_access_endpoint(
    template_id: int,
    db: Session = Depends(get_db),
    current_user: UserInfo = Depends(get_current_user)
):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —à–∞–±–ª–æ–Ω—É –æ—Ç—á–µ—Ç–∞"""
    
    template = db.query(ReportTemplate).filter(ReportTemplate.id == template_id).first()
    
    if not template:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–®–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return {
        "can_create_report": check_template_access(template, current_user, "create_report"),
        "can_view_reports": check_template_access(template, current_user, "view_reports"),
        "can_edit_template": ("admin" in current_user.roles or template.created_by_id == current_user.id)
    } 