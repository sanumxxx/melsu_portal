from datetime import timedelta
from fastapi import APIRouter, Depends, HTTPException, status, Query, Request
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from typing import List
from ..database import get_db
from ..dependencies import get_current_user
from ..schemas.user import (
    EmailVerificationRequest, 
    EmailVerificationCode, 
    UserRegistration, 
    UserLogin, 
    User, 
    Token
)
from ..services.auth_service import (
    send_verification_code,
    verify_code,
    authenticate_user,
    create_user,
    create_access_token,
    verify_token
)
from ..services.activity_service import ActivityService
from ..models.user import User as UserModel
from ..core.config import settings
from sqlalchemy import or_

router = APIRouter()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")

@router.post("/send-verification-code")
async def send_code(request: EmailVerificationRequest, db: Session = Depends(get_db)):
    print(f"[API] üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –¥–ª—è {request.email}")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(UserModel).filter(UserModel.email == request.email).first()
        if existing_user:
            print(f"[API] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        
        print(f"[API] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.email} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥")
        code = await send_verification_code(request.email, db)
        print(f"[API] üéâ –ö–æ–¥ –¥–ª—è {request.email} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return {
            "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email", 
            "code": code  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–±—Ä–∞—Ç—å!
        }
    except HTTPException:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        print(f"[API] üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –¥–ª—è {request.email}: {str(e)}")
        print(f"[API] üêû –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}"
        )

@router.post("/verify-code")
async def verify_email_code(request: EmailVerificationCode, db: Session = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ë–ï–ó –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π (mark_as_used=False)
    if verify_code(request.email, request.code, db, mark_as_used=False):
        return {"message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
    else:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥"
        )

@router.post("/register", response_model=Token)
async def register(user_data: UserRegistration, request: Request, db: Session = Depends(get_db)):
    try:
        print(f"[DEBUG] Registration attempt for {user_data.email}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(UserModel).filter(UserModel.email == user_data.email).first()
        if existing_user:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            )
        
        user = create_user(user_data, db)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–¥ –∏—Å—Ç–µ–∫"
            )
        
        print(f"[DEBUG] User created successfully: {user.email}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        activity_service = ActivityService(db)
        activity_service.log_activity(
            action="user_create",
            description=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.email}",
            user_id=user.id,
            resource_type="user",
            resource_id=str(user.id),
            details={
                "first_name": user.first_name,
                "last_name": user.last_name,
                "roles": user.roles
            },
            request=request
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_access_token(
            data={"sub": user.email}, expires_delta=access_token_expires
        )
        return {"access_token": access_token, "token_type": "bearer"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"[ERROR] Registration failed: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )

@router.post("/login", response_model=Token)
async def login(user_data: UserLogin, request: Request, db: Session = Depends(get_db)):
    user = authenticate_user(user_data.email, user_data.password, db)
    if not user:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
        activity_service = ActivityService(db)
        activity_service.log_activity(
            action="login",
            description=f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {user_data.email}",
            user_id=None,
            resource_type="auth",
            details={
                "email": user_data.email,
                "success": False
            },
            request=request
        )
        
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    activity_service = ActivityService(db)
    activity_service.log_activity(
        action="login",
        description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É: {user.email}",
        user_id=user.id,
        resource_type="auth",
        details={
            "email": user.email,
            "success": True,
            "roles": user.roles
        },
        request=request
    )
    
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@router.get("/me", response_model=User)
async def get_current_user_info(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    email = verify_token(token)
    if email is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
            headers={"WWW-Authenticate": "Bearer"},
        )
    user = db.query(UserModel).filter(UserModel.email == email).first()
    if user is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –°–æ–∑–¥–∞–µ–º Pydantic —Å—Ö–µ–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π birth_date
    return User(
        id=user.id,
        email=user.email,
        first_name=user.first_name,
        last_name=user.last_name,
        middle_name=user.middle_name,
        birth_date=user.birth_date.strftime('%Y-%m-%d') if user.birth_date else '',
        gender=user.gender or '',
        roles=user.roles or [],
        is_verified=user.is_verified,
        is_active=user.is_active
    )

@router.get("/search")
async def search_users(
    q: str = Query(..., min_length=2, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"),
    limit: int = Query(10, le=50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    current_user: UserModel = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ email"""
    
    # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not current_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        )
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ email
    search_query = f"%{q}%"
    users = db.query(UserModel)\
        .filter(
            or_(
                UserModel.first_name.ilike(search_query),
                UserModel.last_name.ilike(search_query),
                UserModel.email.ilike(search_query)
            )
        )\
        .filter(UserModel.is_active == True)\
        .limit(limit)\
        .all()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    result = []
    for user in users:
        full_name = f"{user.last_name} {user.first_name}"
        if user.middle_name:
            full_name += f" {user.middle_name}"
        
        result.append({
            "id": user.id,
            "email": user.email,
            "full_name": full_name,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "middle_name": user.middle_name,
            "roles": user.roles
        })
    
    return result

@router.post("/users/by-ids")
async def get_users_by_ids(
    user_ids: List[int],
    current_user: UserModel = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–∞—Å—Å–∏–≤—É ID"""
    
    if not current_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        )
    
    users = db.query(UserModel)\
        .filter(UserModel.id.in_(user_ids))\
        .filter(UserModel.is_active == True)\
        .all()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    result = []
    for user in users:
        full_name = f"{user.last_name} {user.first_name}"
        if user.middle_name:
            full_name += f" {user.middle_name}"
        
        result.append({
            "id": user.id,
            "email": user.email,
            "full_name": full_name,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "middle_name": user.middle_name,
            "roles": user.roles
        })
    
    return result