from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import Dict, Any
import httpx
import hashlib
import hmac
import time
from datetime import datetime, timedelta
import os
import json

from ..database import get_db
from ..models.user_profile import UserProfile
from ..models.user import User
from ..schemas.user_profile import VKOAuthData, TelegramOAuthData, SocialConnectionStatus
from ..dependencies import get_current_user
from ..core.config import settings

router = APIRouter(prefix="/api/oauth", tags=["oauth"])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VK OAuth –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
VK_CLIENT_ID = settings.VK_CLIENT_ID
VK_CLIENT_SECRET = settings.VK_CLIENT_SECRET
VK_SERVICE_KEY = settings.VK_SERVICE_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram OAuth –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = settings.TELEGRAM_BOT_TOKEN



@router.post("/vk/connect")
async def connect_vk_account(
    oauth_data: VKOAuthData,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–¥–∫–ª—é—á–∏—Ç—å VK –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ VK ID SDK"""
    try:
        print(f"üîç VK OAuth: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        print(f"üîç VK OAuth: –î–∞–Ω–Ω—ã–µ - user_id: {oauth_data.user_id}, expires_in: {oauth_data.expires_in}")
        
        access_token = oauth_data.access_token
        user_id = oauth_data.user_id
        expires_in = oauth_data.expires_in or 3600
        
        if not access_token or not user_id:
            raise HTTPException(
                status_code=400,
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç VK"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        async with httpx.AsyncClient() as client:
            user_info_response = await client.get(
                "https://api.vk.com/method/users.get",
                params={
                    "access_token": access_token,
                    "fields": "photo_200,email",
                    "v": "5.131"
                }
            )
            
            if user_info_response.status_code != 200:
                raise HTTPException(
                    status_code=400,
                    detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ VK"
                )
                
            user_info = user_info_response.json()
            
            if "error" in user_info:
                raise HTTPException(
                    status_code=400,
                    detail=f"–û—à–∏–±–∫–∞ VK API: {user_info['error']['error_msg']}"
                )
            
            vk_user_data = user_info["response"][0]
            print(f"üîç VK OAuth: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK: {vk_user_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç VK –∞–∫–∫–∞—É–Ω—Ç –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            print(f"üîç VK OAuth: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è VK ID: {user_id}")
            existing_profile = db.query(UserProfile).filter(
                UserProfile.vk_id == str(user_id),
                UserProfile.user_id != current_user.id
            ).first()
            
            if existing_profile:
                raise HTTPException(
                    status_code=400,
                    detail="–≠—Ç–æ—Ç VK –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"üîç VK OAuth: –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
            profile = db.query(UserProfile).filter(
                UserProfile.user_id == current_user.id
            ).first()
            
            if not profile:
                print(f"üîç VK OAuth: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
                profile = UserProfile(user_id=current_user.id)
                db.add(profile)
            else:
                print(f"üîç VK OAuth: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å ID {profile.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º OAuth –¥–∞–Ω–Ω—ã–µ
            print(f"üîç VK OAuth: –û–±–Ω–æ–≤–ª—è–µ–º OAuth –¥–∞–Ω–Ω—ã–µ")
            profile.vk_id = str(user_id)
            profile.vk_oauth_token = access_token
            profile.vk_oauth_expires_at = datetime.utcnow() + timedelta(seconds=expires_in)
            profile.vk_user_info = vk_user_data
            
            print(f"üîç VK OAuth: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            db.commit()
            print(f"üîç VK OAuth: –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
            return {
                "message": "VK –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω",
                "vk_user_info": vk_user_data
            }
            
    except httpx.RequestError as e:
        print(f"‚ùå VK OAuth: –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )
    except Exception as e:
        print(f"‚ùå VK OAuth: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        print(f"‚ùå VK OAuth: –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        print(f"‚ùå VK OAuth: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.post("/telegram/connect")
async def connect_telegram_account(
    oauth_data: TelegramOAuthData,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ OAuth"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
        if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "your_telegram_bot_token":
            raise HTTPException(
                status_code=500,
                detail="Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        if time.time() - oauth_data.auth_date > 3600:
            raise HTTPException(
                status_code=400,
                detail="–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏"
            )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        auth_data = {
            "id": oauth_data.id,
            "first_name": oauth_data.first_name,
            "auth_date": oauth_data.auth_date
        }
        
        if oauth_data.last_name:
            auth_data["last_name"] = oauth_data.last_name
        if oauth_data.username:
            auth_data["username"] = oauth_data.username
        if oauth_data.photo_url:
            auth_data["photo_url"] = oauth_data.photo_url
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = "\n".join([f"{k}={v}" for k, v in sorted(auth_data.items())])
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hashlib.sha256(TELEGRAM_BOT_TOKEN.encode()).digest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        expected_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        if expected_hash != oauth_data.hash:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        existing_profile = db.query(UserProfile).filter(
            UserProfile.telegram_id == str(oauth_data.id),
            UserProfile.user_id != current_user.id
        ).first()
        
        if existing_profile:
            raise HTTPException(
                status_code=400,
                detail="–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = db.query(UserProfile).filter(
            UserProfile.user_id == current_user.id
        ).first()
        
        if not profile:
            profile = UserProfile(user_id=current_user.id)
            db.add(profile)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ
        profile.telegram_id = str(oauth_data.id)
        profile.telegram_username = oauth_data.username
        profile.telegram_user_info = auth_data
        
        db.commit()
        
        return {
            "message": "Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            "telegram_user_info": auth_data
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.delete("/vk/disconnect")
async def disconnect_vk_account(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–∫–ª—é—á–∏—Ç—å VK –∞–∫–∫–∞—É–Ω—Ç"""
    profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id
    ).first()
    
    if not profile or not profile.vk_id:
        raise HTTPException(
            status_code=404,
            detail="VK –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        )
    
    # –û—á–∏—â–∞–µ–º VK –¥–∞–Ω–Ω—ã–µ
    profile.vk_id = None
    profile.vk_oauth_token = None
    profile.vk_oauth_refresh_token = None
    profile.vk_oauth_expires_at = None
    profile.vk_user_info = None
    
    db.commit()
    
    return {"message": "VK –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω"}

@router.delete("/telegram/disconnect")
async def disconnect_telegram_account(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–∫–ª—é—á–∏—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç"""
    profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id
    ).first()
    
    if not profile or not profile.telegram_id:
        raise HTTPException(
            status_code=404,
            detail="Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        )
    
    # –û—á–∏—â–∞–µ–º Telegram –¥–∞–Ω–Ω—ã–µ
    profile.telegram_id = None
    profile.telegram_username = None
    profile.telegram_user_info = None
    
    db.commit()
    
    return {"message": "Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω"}

@router.get("/status", response_model=SocialConnectionStatus)
async def get_social_connection_status(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"""
    profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id
    ).first()
    
    return SocialConnectionStatus(
        vk_connected=bool(profile and profile.vk_id),
        telegram_connected=bool(profile and profile.telegram_id),
        vk_user_info=profile.vk_user_info if profile else None,
        telegram_user_info=profile.telegram_user_info if profile else None
    ) 