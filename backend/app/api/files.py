import os
import uuid
import tempfile
from typing import List
from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, status
from fastapi.responses import FileResponse
from sqlalchemy.orm import Session
import aiofiles

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä—è–º–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Office —Ñ–∞–π–ª–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Python
try:
    from docx import Document
    from PIL import Image, ImageDraw, ImageFont
    import openpyxl
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4
    OFFICE_CONVERSION_AVAILABLE = True
    print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ø—Ä—è–º–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Office —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
except ImportError as e:
    OFFICE_CONVERSION_AVAILABLE = False
    print(f"‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Office —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

from ..database import get_db
from ..models.request import Request
from ..models.request_file import RequestFile
from ..models.user import User
from ..schemas.request_file import RequestFileResponse
from ..dependencies import get_current_user

router = APIRouter()

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = "uploads"
if not os.path.exists(UPLOAD_DIR):
    os.makedirs(UPLOAD_DIR)

# –ü–∞–ø–∫–∞ –¥–ª—è –∫–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_CACHE_DIR = "image_cache"
if not os.path.exists(IMAGE_CACHE_DIR):
    os.makedirs(IMAGE_CACHE_DIR)

def convert_docx_to_image(docx_path: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DOCX –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ python-docx"""
    
    file_filename = os.path.basename(docx_path)
    base_name = os.path.splitext(file_filename)[0]
    
    print(f"üìù –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DOCX –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {docx_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º DOCX —Ñ–∞–π–ª
        doc = Document(docx_path)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        page_width = 800
        page_height = 1100
        margin = 60
        content_width = page_width - 2 * margin
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.new('RGB', (page_width, page_height), 'white')
        draw = ImageDraw.Draw(image)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã
        try:
            font_normal = ImageFont.truetype("arial.ttf", 12)
            font_bold = ImageFont.truetype("arialbd.ttf", 14)
            font_heading = ImageFont.truetype("arialbd.ttf", 16)
        except:
            font_normal = ImageFont.load_default()
            font_bold = ImageFont.load_default()
            font_heading = ImageFont.load_default()
        
        y_offset = margin
        
        # –†–∏—Å—É–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        for para in doc.paragraphs:
            if para.text.strip():
                # –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
                font = font_normal
                if para.style.name.startswith('Heading'):
                    font = font_heading
                elif any(run.bold for run in para.runs if run.bold):
                    font = font_bold
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                words = para.text.split()
                lines = []
                current_line = []
                
                for word in words:
                    test_line = ' '.join(current_line + [word])
                    if len(test_line) * 7 <= content_width:  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞
                        current_line.append(word)
                    else:
                        if current_line:
                            lines.append(' '.join(current_line))
                            current_line = [word]
                        else:
                            lines.append(word)
                
                if current_line:
                    lines.append(' '.join(current_line))
                
                # –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫–∏
                for line in lines:
                    if y_offset > page_height - margin:
                        break  # –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    
                    draw.text((margin, y_offset), line, fill='black', font=font)
                    y_offset += 20
                
                y_offset += 10  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for table in doc.tables:
            if y_offset > page_height - margin - 100:
                break  # –ù–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            col_width = content_width // len(table.columns) if table.columns else content_width
            row_height = 25
            
            for row_idx, row in enumerate(table.rows):
                for col_idx, cell in enumerate(row.cells):
                    x = margin + col_idx * col_width
                    y = y_offset + row_idx * row_height
                    
                    # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–π–∫–∏
                    draw.rectangle([x, y, x + col_width, y + row_height], 
                                 outline='black', width=1)
                    
                    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–µ
                    cell_text = cell.text.strip()[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    if cell_text:
                        draw.text((x + 5, y + 5), cell_text, fill='black', font=font_normal)
            
            y_offset += len(table.rows) * row_height + 20
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_filename = f"{base_name}_page_1.png"
        image_path = os.path.join(IMAGE_CACHE_DIR, image_filename)
        image.save(image_path, 'PNG', quality=95)
        
        print(f"‚úÖ DOCX –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        return image_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DOCX –¥–æ–∫—É–º–µ–Ω—Ç: {str(e)}")


def convert_xlsx_to_image(xlsx_path: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç XLSX —Ç–∞–±–ª–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ openpyxl"""
    
    file_filename = os.path.basename(xlsx_path)
    base_name = os.path.splitext(file_filename)[0]
    
    print(f"üìä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º XLSX —Ç–∞–±–ª–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {xlsx_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º XLSX —Ñ–∞–π–ª
        workbook = openpyxl.load_workbook(xlsx_path, data_only=True)
        worksheet = workbook.active  # –ë–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        max_row = worksheet.max_row
        max_col = worksheet.max_column
        
        if max_row == 1 and max_col == 1:
            # –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
            max_row = 10
            max_col = 5
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cell_width = 120
        cell_height = 30
        header_height = 35
        page_width = min(max_col * cell_width + 100, 1200)
        page_height = min(max_row * cell_height + 100, 1000)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.new('RGB', (page_width, page_height), 'white')
        draw = ImageDraw.Draw(image)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
        try:
            font_normal = ImageFont.truetype("arial.ttf", 10)
            font_bold = ImageFont.truetype("arialbd.ttf", 11)
        except:
            font_normal = ImageFont.load_default()
            font_bold = ImageFont.load_default()
        
        # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = f"Excel —Ç–∞–±–ª–∏—Ü–∞: {base_name}"
        draw.text((20, 20), title, fill='black', font=font_bold)
        
        y_start = 60
        
        # –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        for row_idx in range(1, min(max_row + 1, 25)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            for col_idx in range(1, min(max_col + 1, 10)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
                x = 20 + (col_idx - 1) * cell_width
                y = y_start + (row_idx - 1) * cell_height
                
                # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–π–∫–∏
                draw.rectangle([x, y, x + cell_width, y + cell_height], 
                             outline='black', width=1)
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏
                cell = worksheet.cell(row=row_idx, column=col_idx)
                cell_value = str(cell.value) if cell.value is not None else ""
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                if len(cell_value) > 15:
                    cell_value = cell_value[:12] + "..."
                
                # –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç (–∂–∏—Ä–Ω—ã–π –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
                font = font_bold if row_idx == 1 else font_normal
                text_color = 'navy' if row_idx == 1 else 'black'
                
                # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–µ
                if cell_value:
                    draw.text((x + 5, y + 8), cell_value, fill=text_color, font=font)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        info_text = f"–†–∞–∑–º–µ—Ä: {max_row} —Å—Ç—Ä–æ–∫ √ó {max_col} –∫–æ–ª–æ–Ω–æ–∫"
        draw.text((20, page_height - 40), info_text, fill='gray', font=font_normal)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_filename = f"{base_name}_page_1.png"
        image_path = os.path.join(IMAGE_CACHE_DIR, image_filename)
        image.save(image_path, 'PNG', quality=95)
        
        print(f"‚úÖ XLSX —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        return image_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ XLSX: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å XLSX —Ç–∞–±–ª–∏—Ü—É: {str(e)}")


def convert_office_to_images(file_path: str) -> List[str]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Office —Ñ–∞–π–ª—ã (DOCX, XLSX) –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    
    file_filename = os.path.basename(file_path)
    file_extension = os.path.splitext(file_filename)[1].lower()
    
    if not OFFICE_CONVERSION_AVAILABLE:
        raise Exception("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Office —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    try:
        if file_extension in ['.docx', '.doc']:
            image_path = convert_docx_to_image(file_path)
            return [image_path]
        elif file_extension in ['.xlsx', '.xls']:
            image_path = convert_xlsx_to_image(file_path)
            return [image_path]
        else:
            raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Office —Ñ–∞–π–ª–∞: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {str(e)}")

# –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–ª–æ–∂–Ω—ã–µ PDF —Ñ—É–Ω–∫—Ü–∏–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!

@router.post("/requests/{request_id}/fields/{field_name}/files/upload", response_model=List[RequestFileResponse])
async def upload_field_files(
    request_id: int,
    field_name: str,
    files: List[UploadFile] = File(...),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫ –ø–æ–ª—é —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏"""
    
    print(f"üîÑ Backend: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤:")
    print(f"   Request ID: {request_id}")
    print(f"   Field name: {field_name}")
    print(f"   Files count: {len(files) if files else 0}")
    print(f"   Current user: {current_user.email if current_user else 'None'}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—è–≤–∫–∞
        print(f"üîç Backend: –ò—â–µ–º –∑–∞—è–≤–∫—É —Å ID {request_id}")
        request = db.query(Request).filter(Request.id == request_id).first()
        if not request:
            print(f"‚ùå Backend: –ó–∞—è–≤–∫–∞ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        print(f"‚úÖ Backend: –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {request.title}, –∞–≤—Ç–æ—Ä: {request.author_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–≤—Ç–æ—Ä –∏–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π)
        print(f"üîê Backend: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        print(f"   –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏: {request.author_id}")
        print(f"   –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {request.assignee_id}")
        print(f"   –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.id}")
        
        if request.author_id != current_user.id and request.assignee_id != current_user.id:
            print(f"‚ùå Backend: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ"
            )
        
        print(f"‚úÖ Backend: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Backend: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )
    
    uploaded_files = []
    
    print(f"üìÅ Backend: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤")
    
    for i, file in enumerate(files, 1):
        print(f"üìÑ Backend: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i}/{len(files)}: {file.filename}")
        print(f"   –†–∞–∑–º–µ—Ä: {file.size if hasattr(file, 'size') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        print(f"   –¢–∏–ø: {file.content_type}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
            content = await file.read()
            file_size = len(content)
            print(f"   –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            
            if file_size > 10 * 1024 * 1024:  # 10MB
                print(f"‚ùå Backend: –§–∞–π–ª {file.filename} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç")
                raise HTTPException(
                    status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,
                    detail=f"–§–∞–π–ª {file.filename} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(file.filename)[1]
            unique_filename = f"{uuid.uuid4()}{file_extension}"
            file_path = os.path.join(UPLOAD_DIR, unique_filename)
            print(f"üíæ Backend: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ {unique_filename}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            async with aiofiles.open(file_path, 'wb') as f:
                await f.write(content)
            print(f"‚úÖ Backend: –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –¥–∏—Å–∫")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –ë–î
            db_file = RequestFile(
                request_id=request_id,
                field_name=field_name,
                filename=file.filename,
                file_path=file_path,
                file_size=file_size,
                content_type=file.content_type or "application/octet-stream",
                uploaded_by=current_user.id
            )
            
            db.add(db_file)
            db.commit()
            db.refresh(db_file)
            print(f"‚úÖ Backend: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å ID {db_file.id}")
            
            uploaded_files.append(db_file)
            
        except Exception as e:
            print(f"‚ùå Backend: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file.filename}: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}"
            )
    
    return uploaded_files

@router.get("/requests/{request_id}/fields/{field_name}/files", response_model=List[RequestFileResponse])
async def get_field_files(
    request_id: int,
    field_name: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—è–≤–∫–∞
    request = db.query(Request).filter(Request.id == request_id).first()
    if not request:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–≤—Ç–æ—Ä, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–ª–∏ –∏–º–µ—é—â–∏–π —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
    user_roles = current_user.roles
    has_admin_rights = any(role in ["admin", "moderator"] for role in user_roles)
    
    if (request.author_id != current_user.id and 
        request.assignee_id != current_user.id and 
        not has_admin_rights):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏"
        )
    
    files = db.query(RequestFile).filter(
        RequestFile.request_id == request_id,
        RequestFile.field_name == field_name
    ).all()
    return files

@router.get("/requests/{request_id}/files", response_model=List[RequestFileResponse])
async def get_all_request_files(
    request_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞—è–≤–∫–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ—Ç–∞–ª—è—Ö)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—è–≤–∫–∞
    request = db.query(Request).filter(Request.id == request_id).first()
    if not request:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–≤—Ç–æ—Ä, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–ª–∏ –∏–º–µ—é—â–∏–π —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
    user_roles = current_user.roles
    has_admin_rights = any(role in ["admin", "moderator"] for role in user_roles)
    
    if (request.author_id != current_user.id and 
        request.assignee_id != current_user.id and 
        not has_admin_rights):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏"
        )
    
    files = db.query(RequestFile).filter(RequestFile.request_id == request_id).all()
    return files

@router.get("/files/{file_id}/download")
async def download_file(
    file_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
    file_record = db.query(RequestFile).filter(RequestFile.id == file_id).first()
    if not file_record:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–µ
    request = file_record.request
    user_roles = current_user.roles
    has_admin_rights = any(role in ["admin", "moderator"] for role in user_roles)
    
    if (request.author_id != current_user.id and 
        request.assignee_id != current_user.id and 
        not has_admin_rights):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
    if not os.path.exists(file_record.file_path):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        )
    
    return FileResponse(
        path=file_record.file_path,
        filename=file_record.filename,
        media_type=file_record.content_type
    )

@router.get("/files/{file_id}/preview")
async def preview_file(
    file_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞"""
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
    file_record = db.query(RequestFile).filter(RequestFile.id == file_id).first()
    if not file_record:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–µ
    request = file_record.request
    user_roles = current_user.roles
    has_admin_rights = any(role in ["admin", "moderator"] for role in user_roles)
    
    if (request.author_id != current_user.id and 
        request.assignee_id != current_user.id and 
        not has_admin_rights):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
    if not os.path.exists(file_record.file_path):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        )
    
    return FileResponse(
        path=file_record.file_path,
        media_type=file_record.content_type
    )

@router.get("/files/{file_id}/preview-images")
async def preview_file_as_images(
    file_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä DOCX —Ñ–∞–π–ª–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü - –ë–ï–ó –í–û–î–Ø–ù–´–• –ó–ù–ê–ö–û–í!"""
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
    file_record = db.query(RequestFile).filter(RequestFile.id == file_id).first()
    if not file_record:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–µ
    request = file_record.request
    user_roles = current_user.roles
    has_admin_rights = any(role in ["admin", "moderator"] for role in user_roles)
    
    if (request.author_id != current_user.id and 
        request.assignee_id != current_user.id and 
        not has_admin_rights):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
    if not os.path.exists(file_record.file_path):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Office —Ñ–∞–π–ª (DOCX –∏–ª–∏ XLSX)
    supported_types = [
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',  # .docx
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',       # .xlsx
        'application/msword',                                                       # .doc
        'application/vnd.ms-excel'                                                  # .xls
    ]
    supported_extensions = ['.docx', '.doc', '.xlsx', '.xls']
    
    is_supported = (
        file_record.content_type in supported_types or
        'word' in file_record.content_type or
        'excel' in file_record.content_type or
        'spreadsheet' in file_record.content_type or
        any(file_record.filename.lower().endswith(ext) for ext in supported_extensions)
    )
    
    if not is_supported:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è DOCX –∏ XLSX —Ñ–∞–π–ª–æ–≤"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    if not OFFICE_CONVERSION_AVAILABLE:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä."
        )
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DOCX –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_paths = convert_office_to_images(file_record.file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        # Frontend –º–æ–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        if image_paths and os.path.exists(image_paths[0]):
            return FileResponse(
                path=image_paths[0],
                media_type="image/png",
                filename=f"{os.path.splitext(file_record.filename)[0]}_page_1.png"
            )
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {file_id} –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_msg = "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        if "–±–∏–±–ª–∏–æ—Ç–µ–∫–∏" in str(e):
            error_msg = "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        elif "docx2python" in str(e):
            error_msg = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DOCX —Ñ–∞–π–ª–∞"
        
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"{error_msg}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä."
        )

@router.delete("/files/{file_id}")
async def delete_file(
    file_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
    file_record = db.query(RequestFile).filter(RequestFile.id == file_id).first()
    if not file_record:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
    user_roles = current_user.roles
    has_admin_rights = any(role in ["admin", "moderator"] for role in user_roles)
    
    if file_record.uploaded_by != current_user.id and not has_admin_rights:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞"
        )
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
    if os.path.exists(file_record.file_path):
        os.remove(file_record.file_path)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
    db.delete(file_record)
    db.commit()
    
    return {"message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"} 