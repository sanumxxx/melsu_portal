import os
import logging
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from .core.logging_config import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)
logger.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
env_path = os.path.join(project_root, '.env')
if os.path.exists(env_path):
    try:
        load_dotenv(dotenv_path=env_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
else:
    print(f"‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

from fastapi import FastAPI, HTTPException, Depends, status, Request, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
import traceback
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
from datetime import datetime
from .database import engine, Base
from .startup import startup_application, check_required_environment
from .api import auth, profile, dev, users, departments
from .dependencies import get_current_user, UserInfo
from .models.user import User as UserModel, UserRole
from .models.role import Role
from .schemas.user import UserRoleUpdate
from sqlalchemy.orm import Session
from .database import get_db
from .middleware.activity_middleware import ActivityLoggingMiddleware

# WebSocket –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    from .api.websocket import websocket_endpoint
    print("‚úÖ WebSocket –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ WebSocket –º–æ–¥—É–ª—è: {e}")
    websocket_endpoint = None

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_required_environment()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —Ä–æ–ª–∏ –∏ —Ç.–¥.)
startup_application()

app = FastAPI(
    title="MelSU Portal Backend",
    description="Portal API for my.melsu.ru",
    version="1.0.0"
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
app.add_middleware(ActivityLoggingMiddleware)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ {request.url}:")
    print(f"   –ú–µ—Ç–æ–¥: {request.method}")
    print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
    print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {exc.errors()}")
    print(f"   –¢–µ–ª–æ –æ—à–∏–±–∫–∏: {exc}")
    
    return JSONResponse(
        status_code=422,
        content={
            "detail": exc.errors(),
            "url": str(request.url),
            "method": request.method
        }
    )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ {request.url}:")
    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(exc).__name__}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(exc)}")
    print(f"   –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    
    return JSONResponse(
        status_code=500,
        content={
            "detail": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(exc)}",
            "type": type(exc).__name__
        }
    )

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://localhost:3001", 
        "http://127.0.0.1:3000",
        "http://10.128.7.101:3000",  # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å
        "https://my.melsu.ru"  
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=[
        "Accept",
        "Accept-Language", 
        "Content-Language",
        "Content-Type",
        "Authorization",
        "X-Requested-With",
        "Origin",
        "Access-Control-Request-Method",
        "Access-Control-Request-Headers"
    ],
    expose_headers=["*"],
)

# –°—Ö–µ–º—ã Pydantic

class DashboardResponse(BaseModel):
    message: str
    user: UserInfo
    quick_links: List[Dict[str, str]]
    recent_activity: List[Dict[str, Any]]

class ScheduleItem(BaseModel):
    time: str
    subject: str
    room: str
    teacher: Optional[str] = None

class ScheduleResponse(BaseModel):
    user_email: str
    date: str
    schedule: List[ScheduleItem]

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.include_router(auth.router, prefix="/auth", tags=["authentication"])
app.include_router(profile.router, prefix="/api", tags=["profile"])
app.include_router(dev.router, tags=["development"])  # DEV endpoints
app.include_router(users.router, prefix="/api", tags=["users"])  # Users management endpoints
app.include_router(departments.router, prefix="/api", tags=["departments"])  # Departments management endpoints

# –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞—è–≤–æ–∫
from .api import request_templates
app.include_router(request_templates.router, prefix="/api/request-templates", tags=["request-templates"])

# –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–µ–π
from .api import fields
app.include_router(fields.router, prefix="/api/fields", tags=["fields"])

# –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫
from .api import requests
app.include_router(requests.router, prefix="/api/requests", tags=["requests"])

# –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π
from .api import roles
from .api import profile_fields
app.include_router(roles.router, prefix="/api/roles", tags=["roles"])
app.include_router(profile_fields.router, prefix="/api", tags=["profile-fields"])

# –°–∏—Å—Ç–µ–º–∞ —Ñ–∞–π–ª–æ–≤
from .api import files
app.include_router(files.router, prefix="/api", tags=["files"])

# –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
from .api import assignments
app.include_router(assignments.router, prefix="/api", tags=["assignments"])

# –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
from .api import portfolio
app.include_router(portfolio.router, prefix="/api/portfolio", tags=["portfolio"])

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
from .api import directories
app.include_router(directories.router, prefix="/api/directories", tags=["directories"])

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º
from .api.admin import directory_access
app.include_router(directory_access.router, prefix="/api/admin/directory-access", tags=["admin-directory-access"])



# –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–∞–º
from .api import group_access
app.include_router(group_access.router, prefix="/api", tags=["group-access"])

# –°–∏—Å—Ç–µ–º–∞ –≥—Ä—É–ø–ø
from .api import groups
app.include_router(groups.router, prefix="/api", tags=["groups"])

# –°–∏—Å—Ç–µ–º–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
from .api import announcements
app.include_router(announcements.router, prefix="/api", tags=["announcements"])

# –°–∏—Å—Ç–µ–º–∞ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
from .api import curator_access
app.include_router(curator_access.router, prefix="/api", tags=["curator-access"])

# –°–∏—Å—Ç–µ–º–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from .api import telegram
app.include_router(telegram.router, prefix="/api", tags=["telegram"])

# OAuth –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
from .api import oauth
app.include_router(oauth.router, tags=["oauth"])

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤
from .api import report_templates, reports
app.include_router(report_templates.router, prefix="/api", tags=["report-templates"])
app.include_router(reports.router, prefix="/api", tags=["reports"])

# –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
from .api import activity_logs
app.include_router(activity_logs.router, prefix="/api/activity-logs", tags=["activity-logs"])

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤
import os
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ uploads –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ main.py
current_dir = os.path.dirname(os.path.abspath(__file__))
uploads_dir = os.path.join(current_dir, "..", "uploads")
uploads_dir = os.path.abspath(uploads_dir)

print(f"üìÅ Static files directory: {uploads_dir}")

if not os.path.exists(uploads_dir):
    os.makedirs(uploads_dir)
    print(f"‚úÖ Created uploads directory: {uploads_dir}")

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
announcements_dir = os.path.join(uploads_dir, "announcements")
if not os.path.exists(announcements_dir):
    os.makedirs(announcements_dir)
    print(f"‚úÖ Created announcements directory: {announcements_dir}")

app.mount("/uploads", StaticFiles(directory=uploads_dir), name="uploads")
print(f"üåê Static files mounted at /uploads -> {uploads_dir}")

# WebSocket –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.websocket("/ws/{user_id}")
async def websocket_notifications(websocket: WebSocket, user_id: int):
    """WebSocket endpoint –¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if websocket_endpoint is None:
        print("‚ùå WebSocket endpoint –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        await websocket.accept()
        await websocket.send_json({
            "error": "WebSocket service temporarily unavailable",
            "timestamp": datetime.now().isoformat()
        })
        await websocket.close()
        return
    
    try:
        await websocket_endpoint(websocket, user_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            await websocket.accept()
            await websocket.send_json({
                "error": f"WebSocket error: {str(e)}",
                "timestamp": datetime.now().isoformat()
            })
            await websocket.close()
        except:
            pass

@app.get("/")
async def root():
    return {"message": "University Portal API"}

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "portal-backend", "version": "1.0.0"}

@app.get("/debug/uploads")
async def debug_uploads():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ uploads
        current_dir = os.path.dirname(os.path.abspath(__file__))
        uploads_dir = os.path.join(current_dir, "..", "uploads")
        uploads_dir = os.path.abspath(uploads_dir)
        
        announcements_dir = os.path.join(uploads_dir, "announcements")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫
        uploads_exists = os.path.exists(uploads_dir)
        announcements_exists = os.path.exists(announcements_dir)
        
        # –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
        uploads_files = []
        announcements_files = []
        
        if uploads_exists:
            uploads_files = os.listdir(uploads_dir) if os.path.isdir(uploads_dir) else []
        
        if announcements_exists:
            announcements_files = os.listdir(announcements_dir) if os.path.isdir(announcements_dir) else []
        
        return {
            "uploads_directory": uploads_dir,
            "uploads_exists": uploads_exists,
            "announcements_directory": announcements_dir,
            "announcements_exists": announcements_exists,
            "uploads_files_count": len(uploads_files),
            "announcements_files_count": len(announcements_files),
            "recent_announcements_files": announcements_files[-5:] if announcements_files else [],
            "static_mount_status": "mounted at /uploads",
            "working_directory": os.getcwd()
        }
    except Exception as e:
        return {
            "error": str(e),
            "traceback": traceback.format_exc()
        }

@app.get("/api/websocket/status")
async def websocket_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        from .api.websocket import manager
        return {
            "status": "available" if websocket_endpoint is not None else "unavailable",
            "connected_users": manager.get_connected_users() if websocket_endpoint is not None else [],
            "connection_count": len(manager.get_connected_users()) if websocket_endpoint is not None else 0,
            "endpoint_url": "/ws/{user_id}",
            "module_imported": websocket_endpoint is not None
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "module_imported": websocket_endpoint is not None
        }

# ===========================================
# –ó–ê–©–ò–©–ï–ù–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –° –ü–†–û–°–¢–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô
# ===========================================

@app.get("/profile", response_model=UserInfo)
async def get_profile(current_user: UserInfo = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return current_user

@app.get("/dashboard", response_model=DashboardResponse)
async def get_dashboard(current_user: UserInfo = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    
    return DashboardResponse(
        message=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {current_user.first_name} {current_user.last_name}!",
        user=current_user,
        quick_links=[
            {"name": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "url": "/schedule"},
            {"name": "–û—Ü–µ–Ω–∫–∏", "url": "/grades"},
            {"name": "–û–±—ä—è–≤–ª–µ–Ω–∏—è", "url": "/announcements"}
        ],
        recent_activity=[
            {
                "type": "login",
                "message": "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                "timestamp": datetime.now().isoformat()
            },
            {
                "type": "schedule",
                "message": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                "timestamp": datetime.now().isoformat()
            }
        ]
    )

@app.get("/schedule", response_model=ScheduleResponse)
async def get_schedule(current_user: UserInfo = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    mock_schedule = [
        ScheduleItem(
            time="09:00-10:30",
            subject="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            room="–∞—É–¥. 301",
            teacher="–ò–≤–∞–Ω–æ–≤ –ò.–ò."
        ),
        ScheduleItem(
            time="11:00-12:30",
            subject="–§–∏–∑–∏–∫–∞",
            room="–∞—É–¥. 205",
            teacher="–ü–µ—Ç—Ä–æ–≤ –ü.–ü."
        ),
        ScheduleItem(
            time="13:30-15:00",
            subject="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            room="–∞—É–¥. 401",
            teacher="–°–∏–¥–æ—Ä–æ–≤ –°.–°."
        )
    ]
    
    return ScheduleResponse(
        user_email=current_user.email,
        date=datetime.now().strftime("%Y-%m-%d"),
        schedule=mock_schedule
    )

@app.get("/grades")
async def get_grades(current_user: UserInfo = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    return {
        "user_email": current_user.email,
        "semester": "2024-2025 –æ—Å–µ–Ω–Ω–∏–π",
        "subjects": [
            {
                "name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "grades": [5, 4, 5, 4],
                "average": 4.5
            },
            {
                "name": "–§–∏–∑–∏–∫–∞", 
                "grades": [4, 5, 4, 5],
                "average": 4.5
            },
            {
                "name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "grades": [5, 5, 5, 5],
                "average": 5.0
            }
        ]
    }

@app.get("/announcements")
async def get_announcements(current_user: UserInfo = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    
    return {
        "announcements": [
            {
                "id": 1,
                "title": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
                "content": "–ó–∞–Ω—è—Ç–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ 25.06 –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ 26.06",
                "date": "2025-06-22",
                "urgent": True
            },
            {
                "id": 2,
                "title": "–ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ",
                "content": "–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —É—á–µ–±–Ω–∏–∫–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
                "date": "2025-06-21",
                "urgent": False
            }
        ]
    }

# ===========================================
# –ê–î–ú–ò–ù–°–ö–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´ 
# ===========================================

def has_admin_role(current_user: UserInfo) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    return "admin" in (current_user.roles if hasattr(current_user, 'roles') else [])

@app.post("/admin/make-admin/{user_id}")
async def make_user_admin(user_id: int, current_user: UserInfo = Depends(get_current_user), db: Session = Depends(get_db)):
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(UserModel).filter(UserModel.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    user_roles = user.roles or []
    if "admin" not in user_roles:
        user_roles.append("admin")
        user.roles = user_roles
        db.commit()
        db.refresh(user)
    
    return {"message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", "roles": user.roles}

@app.get("/admin/users")
async def get_all_users(current_user: UserInfo = Depends(get_current_user), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    user_full = db.query(UserModel).filter(UserModel.email == current_user.email).first()
    if not user_full or "admin" not in (user_full.roles or []):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    users = db.query(UserModel).all()
    return {"users": users}

@app.get("/admin/users/by-role/{role}")
async def get_users_by_role(role: str, current_user: UserInfo = Depends(get_current_user), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    user_full = db.query(UserModel).filter(UserModel.email == current_user.email).first()
    if not user_full or "admin" not in (user_full.roles or []):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–æ–ª—å
    valid_roles = [r.value for r in UserRole]
    if role not in valid_roles:
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {valid_roles}")
    
    users = db.query(UserModel).all()
    filtered_users = [user for user in users if role in (user.roles or [])]
    
    return {"role": role, "users": filtered_users, "count": len(filtered_users)}

@app.put("/admin/users/{user_id}/roles")
async def update_user_roles(user_id: int, role_data: UserRoleUpdate, current_user: UserInfo = Depends(get_current_user), db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    user_full = db.query(UserModel).filter(UserModel.email == current_user.email).first()
    if not user_full or "admin" not in (user_full.roles or []):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    target_user = db.query(UserModel).filter(UserModel.id == user_id).first()
    if not target_user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏)
    for role in role_data.roles:
        existing_role = db.query(Role).filter(Role.name == role, Role.is_active == True).first()
        if not existing_role:
            # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
            valid_roles = [r.value for r in UserRole]
            if role not in valid_roles:
                raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: {role}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏
    target_user.roles = role_data.roles
    db.commit()
    db.refresh(target_user)
    
    return {"message": "–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "user": target_user}

@app.post("/api/users/{user_id}/roles")
async def manage_user_role(
    user_id: int, 
    role_data: dict,
    current_user: UserInfo = Depends(get_current_user), 
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    user_full = db.query(UserModel).filter(UserModel.email == current_user.email).first()
    if not user_full or "admin" not in (user_full.roles or []):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    target_user = db.query(UserModel).filter(UserModel.id == user_id).first()
    if not target_user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    role = role_data.get("role")
    action = role_data.get("action", "add")  # add –∏–ª–∏ remove
    
    if not role:
        raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏)
    existing_role = db.query(Role).filter(Role.name == role, Role.is_active == True).first()
    if not existing_role:
        # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
        valid_roles = [r.value for r in UserRole]
        if role not in valid_roles:
            raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: {role}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–æ–ª–∏
    current_roles = target_user.roles or []
    
    if action == "add":
        if role not in current_roles:
            current_roles.append(role)
            message = f"–†–æ–ª—å '{role}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        else:
            message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å '{role}'"
    elif action == "remove":
        if role in current_roles:
            current_roles.remove(role)
            message = f"–†–æ–ª—å '{role}' —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        else:
            message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å '{role}'"
    else:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add' –∏–ª–∏ 'remove'")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏
    target_user.roles = current_roles
    db.commit()
    db.refresh(target_user)
    
    return {
        "message": message, 
        "user_id": user_id,
        "role": role,
        "action": action,
        "current_roles": current_roles
    }

@app.post("/admin/init-system")
async def manual_system_initialization(current_user: UserInfo = Depends(get_current_user), db: Session = Depends(get_db)):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    user_full = db.query(UserModel).filter(UserModel.email == current_user.email).first()
    if not user_full or "admin" not in (user_full.roles or []):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    try:
        from .startup import init_system_roles, init_field_types, init_base_departments
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        roles_stats = init_system_roles(db)
        fields_stats = init_field_types(db)
        depts_stats = init_base_departments(db)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_created = roles_stats['created'] + fields_stats['created'] + depts_stats['created']
        total_updated = roles_stats['updated'] + fields_stats['updated'] + depts_stats['updated']
        total_errors = roles_stats['errors'] + fields_stats['errors'] + depts_stats['errors']
        
        return {
            "message": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            "stats": {
                "total_created": total_created,
                "total_updated": total_updated, 
                "total_errors": total_errors,
                "roles": roles_stats,
                "field_types": fields_stats,
                "departments": depts_stats
            },
            "success": total_errors == 0
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")

@app.get("/admin/system-status")
async def get_system_status(current_user: UserInfo = Depends(get_current_user), db: Session = Depends(get_db)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    user_full = db.query(UserModel).filter(UserModel.email == current_user.email).first()
    if not user_full or "admin" not in (user_full.roles or []):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
        roles_count = db.query(Role).count()
        system_roles_count = db.query(Role).filter(Role.is_system == True).count()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
        field_types_count = db.query(FieldType).count()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
        departments_count = db.query(Department).count()
        
        return {
            "database_connected": True,
            "roles": {
                "total": roles_count,
                "system_roles": system_roles_count,
                "expected_system_roles": 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –≤ SYSTEM_ROLES
            },
            "field_types": {
                "total": field_types_count,
                "expected": 12  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –≤ FIELD_TYPES
            },
            "departments": {
                "total": departments_count,
                "expected": 7  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –≤ BASE_DEPARTMENTS
            },
            "initialization_needed": {
                "roles": system_roles_count < 8,
                "field_types": field_types_count < 12,
                "departments": departments_count < 7
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return {
            "database_connected": False,
            "error": str(e)
        }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 