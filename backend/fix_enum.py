#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ enum achievementcategory –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
"""

import os
import sys
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
env_path = os.path.join(project_root, '.env')
load_dotenv(dotenv_path=env_path)

DATABASE_URL = os.getenv("DATABASE_URL")

def main():
    try:
        engine = create_engine(DATABASE_URL)
        
        with engine.connect() as connection:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ enum achievementcategory...")
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            connection.execute(text("DROP TABLE IF EXISTS portfolio_files CASCADE;"))
            connection.execute(text("DROP TABLE IF EXISTS portfolio_achievements CASCADE;"))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π enum
            connection.execute(text("DROP TYPE IF EXISTS achievementcategory CASCADE;"))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π enum —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
            connection.execute(text("""
                CREATE TYPE achievementcategory AS ENUM (
                    'academic', 
                    'sports', 
                    'creative', 
                    'volunteer', 
                    'professional'
                );
            """))
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            connection.execute(text("""
                CREATE TABLE portfolio_achievements (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                    title VARCHAR NOT NULL,
                    description TEXT,
                    category achievementcategory NOT NULL,
                    achievement_date TIMESTAMP WITH TIME ZONE NOT NULL,
                    organization VARCHAR,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE
                );
            """))
            
            connection.execute(text("""
                CREATE TABLE portfolio_files (
                    id SERIAL PRIMARY KEY,
                    achievement_id INTEGER NOT NULL REFERENCES portfolio_achievements(id) ON DELETE CASCADE,
                    filename VARCHAR NOT NULL,
                    original_filename VARCHAR NOT NULL,
                    file_path VARCHAR NOT NULL,
                    file_size INTEGER NOT NULL,
                    content_type VARCHAR NOT NULL,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
            """))
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            connection.execute(text("CREATE INDEX ix_portfolio_achievements_id ON portfolio_achievements(id);"))
            connection.execute(text("CREATE INDEX ix_portfolio_achievements_user_id ON portfolio_achievements(user_id);"))
            connection.execute(text("CREATE INDEX ix_portfolio_files_id ON portfolio_files(id);"))
            connection.execute(text("CREATE INDEX ix_portfolio_files_achievement_id ON portfolio_files(achievement_id);"))
            
            connection.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º
            result = connection.execute(text("SELECT unnest(enum_range(NULL::achievementcategory))::text;"))
            values = result.fetchall()
            print(f"‚úÖ Enum –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {[v[0] for v in values]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 